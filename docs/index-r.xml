<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>data-in-flight</title>
<link>https://whipson.github.io/data-in-flight/#category=R</link>
<atom:link href="https://whipson.github.io/data-in-flight/index-r.xml" rel="self" type="application/rss+xml"/>
<description>scrappy data engineering</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Fri, 22 Nov 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Chain your maestro pipelines DAG style</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-dags/main.html</link>
  <description><![CDATA[ 





<p>I’m thrilled to introduce the biggest maestro update yet. DAGs! A DAG (directed acyclic graph) in the context of data pipelines is when you have data processing steps that connect into other steps until a final step is reached. Almost all data orchestration platforms use the concept of DAGs to increase reusability and isolation of discrete components. As of maestro 0.4.0, DAGs are now possible using <code>maestroInputs</code> and <code>maestroOutputs</code> tags. This post will go through the motivation and implementation of this new feature.</p>
<p>If you haven’t heard of maestro, it’s a package that helps you schedule your R scripts all in a single project using tags. You can learn more about it <a href="../../posts/hello-maestro/hello-maestro.html">here</a>.</p>
<p>Get it from CRAN:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="why-dags" class="level2">
<h2 class="anchored" data-anchor-id="why-dags">Why DAGs?</h2>
<p>Let’s imagine we have a data pipeline where we want to extract data, clean/transform it, train a model, and send the predictions to a database. We can take each of these steps and chain them together so that the output of ‘extract’ is automatically fed into ‘clean/transform’, and so on.</p>
<p>The advantage of doing this in maestro is that you get better observability and retracability along each step. As we’ll see, we can more clearly identify where errors occur and even recover intermediate results.</p>
</section>
<section id="dags-in-maestro" class="level2">
<h2 class="anchored" data-anchor-id="dags-in-maestro">DAGs in maestro</h2>
<p>In short, a DAG pipeline is created using either <code>maestroInputs</code> or <code>maestroOutputs</code> tags. Both are valid but usually only one is needed. Simply put, a pipeline with a tag <code>#' @maestroInputs start_pipe</code> receives the output from a pipeline called <code>start_pipe</code>. Alternatively, we could use <code>#' @maestroOutputs end_pipe</code> to indicate that the pipeline called <code>end_pipe</code> receives the input of the current pipeline.</p>
<p>Let’s see an example where we make model predictions on the <code>nycflights13</code> data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' /pipelines/model_flights.R</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency daily</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2024-11-22 09:00:00</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroOutputs process_flights</span></span>
<span id="cb2-5">extract_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-6">  </span>
<span id="cb2-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Imagine this is from a source where the data changes</span></span>
<span id="cb2-8">  nycflights13<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>flights</span>
<span id="cb2-9">}</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroOutputs train_model</span></span>
<span id="cb2-12">process_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.input) {</span>
<span id="cb2-13">  </span>
<span id="cb2-14">  daily_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-15">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_date</span>(year, month, day)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-16">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb2-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_flights =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> date</span>
<span id="cb2-18">    )</span>
<span id="cb2-19">  </span>
<span id="cb2-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A simple time series</span></span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> daily_flights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_flights, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>)</span>
<span id="cb2-22">}</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroOutputs forecast_flights</span></span>
<span id="cb2-25">train_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.input) {</span>
<span id="cb2-26">  </span>
<span id="cb2-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A simple ARIMA model (using the {forecast} package would be better)</span></span>
<span id="cb2-28">  .input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-30">}</span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestro</span></span>
<span id="cb2-33">forecast_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.input) {</span>
<span id="cb2-34">  </span>
<span id="cb2-35">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forecast the next 7 days</span></span>
<span id="cb2-36">  pred_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(.input, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.ahead =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-37">  pred_obj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pred</span>
<span id="cb2-38">}</span></code></pre></div>
</div>
<p>We won’t focus much on the content of the functions. Instead, pay attention to the use of <code>maestroOutputs</code>. Each function that outputs into another references the name of that function. The last function <code>forecast_flights</code> just uses a generic <code>#' @maestro</code> tag to indicate that it is part of the maestro project. Also note the use of the special keyword <code>.input</code>. This argument must be supplied to all functions receiving an input. Use this argument to capture the data being passed each step along the pipeline.</p>
<p>Now we can build the schedule like always.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /orchestrator.R</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb3-3"></span>
<span id="cb3-4">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>We can verify that the DAG is properly defined using the <code>show_network()</code> function on our newly created schedule.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_network</span>(schedule)</span></code></pre></div>
<div class="cell-output-display">
<div class="grViz html-widget html-fill-item" id="htmlwidget-f479831f88694cd7c32c" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-f479831f88694cd7c32c">{"x":{"diagram":"digraph {\n\ngraph [layout = \"neato\",\n       outputorder = \"edgesfirst\",\n       bgcolor = \"white\"]\n\nnode [fontname = \"Helvetica\",\n      fontsize = \"10\",\n      shape = \"circle\",\n      fixedsize = \"true\",\n      width = \"0.5\",\n      style = \"filled\",\n      fillcolor = \"aliceblue\",\n      color = \"gray70\",\n      fontcolor = \"gray50\"]\n\nedge [fontname = \"Helvetica\",\n     fontsize = \"8\",\n     len = \"1.5\",\n     color = \"gray80\",\n     arrowsize = \"0.5\"]\n\n  \"1\" [label = \"extract_flights\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,4!\"] \n  \"2\" [label = \"process_flights\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,3!\"] \n  \"3\" [label = \"train_model\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,2!\"] \n  \"4\" [label = \"forecast_flights\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,1!\"] \n  \"1\"->\"2\" \n  \"2\"->\"3\" \n  \"3\"->\"4\" \n}","config":{"engine":"dot","options":null}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Now we can run the schedule. For testing purposes, we’ll set <code>run_all = TRUE</code> so that the pipeline runs no matter what the scheduling is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb5-2">  schedule,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">run_all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-4">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-11-22 14:25:11]
Running pipelines ▶ </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ extract_flights</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ extract_flights [768ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ |-process_flights</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ |-process_flights [24ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ   |-train_model</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔   |-train_model [9ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ   |-  |-forecast_flights</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔   |-  |-forecast_flights [5ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-11-22 14:25:11]
Pipeline execution completed ■ | 0.833 sec elapsed </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 4 successes | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 4 total</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>────────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Maestro Schedule with 4 pipelines:  </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Success</code></pre>
</div>
</div>
<p>We can see from the console output that the whole pipeline ran successfully. If we want to get the output from each of the steps, we can use <code>get_artifacts()</code>. This returns intermediate results too, which can be helpful if you want to retrieve state after a failed run of the schedule.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">artifacts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_artifacts</span>(schedule)</span>
<span id="cb26-2">artifacts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>forecast_flights</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time Series:
Start = c(2, 1) 
End = c(2, 7) 
Frequency = 365 
[1] 942.7232 934.9722 933.7773 933.5931 933.5647 933.5603 933.5596</code></pre>
</div>
</div>
<p>Maestro can be used to create any valid DAG (e.g., branching, joining, etc.). I hope this new addition to maestro super charges your data orchestration.</p>
<p>Check out the <a href="https://whipson.github.io/maestro/news/index.html">release notes</a> for more details on what’s new in version 0.4.0. If you find any bugs or want to suggest new features and improvements, please add them <a href="https://github.com/whipson/maestro/issues">here</a> or reach out to me on <a href="https://www.linkedin.com/in/will-hipson/">LinkedIn</a>.</p>
<p>Happy orchestrating!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-dags/main.html</guid>
  <pubDate>Fri, 22 Nov 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>maestro 0.3.0</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-0-3-0/maestro-0-3-0.html</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-0-3-0/images/logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p><code>maestro</code> 0.3.0 introduces principled methods for obtaining a schedule table, pipeline status, and artifacts (i.e., return values). This is now possible because of a major refactoring of the backend to use R6 classes for pipelines and schedules. This also introduced a few breaking changes, but on the whole, not a lot is different.</p>
<p>If you haven’t heard of maestro, it’s a package that helps you schedule your R scripts all in a single project using tags. You can learn more about it <a href="../../posts/hello-maestro/hello-maestro.html">here</a>.</p>
<p>Get it from CRAN:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="a-schedule-is-now-a-maestroschedule" class="level2">
<h2 class="anchored" data-anchor-id="a-schedule-is-now-a-maestroschedule">A schedule is now a &lt;MaestroSchedule&gt;</h2>
<p>Schedules are now a special class with attributes and methods. For most users, this won’t change how they use maestro, but it’ll make it much easier to extend maestro with new features in the future. Let’s see how a typical maestro scenario plays out now:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a few dummy pipelines for demo purposes</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_pipeline</span>(</span>
<span id="cb2-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">open =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-6">  )</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_pipeline</span>(</span>
<span id="cb2-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 week"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">open =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-9">  )</span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_pipeline</span>(</span>
<span id="cb2-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe3"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2 hours"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">open =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-12">  )</span>
<span id="cb2-13"></span>
<span id="cb2-14">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-15"></span>
<span id="cb2-16">output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb2-17">  schedule,</span>
<span id="cb2-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hourly"</span></span>
<span id="cb2-19">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-09-23 14:31:34]
Running pipelines ▶ </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ my_pipe3</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ my_pipe3 [8ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-09-23 14:31:34]
Pipeline execution completed ■ | 0.101 sec elapsed </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 1 success | → 2 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>────────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Next scheduled pipelines ❯ </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Pipe name | Next scheduled run</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• my_pipe3 | 2024-09-23 20:00:00</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• my_pipe | 2024-09-24</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• my_pipe2 | 2024-09-30</code></pre>
</div>
</div>
<p>So far these are the same steps as before. The difference is now in how we interact with the schedule. Here, <code>schedule</code> is no longer a data.frame, it’s a <code>&lt;MaestroSchedule&gt;</code> R6 object. If we want to get the status of each of the pipelines, we can use the new <code>get_status()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_status</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  pipe_name script_path  invoked success pipeline_started    pipeline_ended     
  &lt;chr&gt;     &lt;chr&gt;        &lt;lgl&gt;   &lt;lgl&gt;   &lt;dttm&gt;              &lt;dttm&gt;             
1 my_pipe   ./pipelines… FALSE   FALSE   NA                  NA                 
2 my_pipe2  ./pipelines… FALSE   FALSE   NA                  NA                 
3 my_pipe3  ./pipelines… TRUE    TRUE    2024-09-23 17:31:34 2024-09-23 17:31:34
# ℹ 4 more variables: errors &lt;int&gt;, warnings &lt;int&gt;, messages &lt;int&gt;,
#   next_run &lt;dttm&gt;</code></pre>
</div>
</div>
<p>If we just want the schedule, we can use <code>get_schedule()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_schedule</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 9
  script_path      pipe_name frequency start_time          tz    skip  log_level
  &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;     &lt;dttm&gt;              &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt;    
1 ./pipelines/my_… my_pipe   1 day     2024-09-23 00:00:00 UTC   FALSE INFO     
2 ./pipelines/my_… my_pipe2  1 week    2024-09-23 00:00:00 UTC   FALSE INFO     
3 ./pipelines/my_… my_pipe3  2 hours   2024-09-23 00:00:00 UTC   FALSE INFO     
# ℹ 2 more variables: frequency_n &lt;int&gt;, frequency_unit &lt;chr&gt;</code></pre>
</div>
</div>
<p>Note that we didn’t have to assign a new object when we ran <code>run_schedule()</code>. The object <code>schedule</code> is updated to reflect the execution of the schedule.</p>
<p>If any pipelines have return values, we can access those as a named list using <code>get_artifacts()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_artifacts</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>named list()</code></pre>
</div>
</div>
</section>
<section id="invoking-a-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="invoking-a-pipeline">Invoking a pipeline</h2>
<p>When interactively working in a maestro project, it may sometimes be useful to manually trigger a pipeline. Now, if you’ve created a <code>&lt;MaestroSchedule&gt;</code> object in the environment, you can do this using <code>invoke()</code>. This will execute the pipeline regardless of whether it’s scheduled or not.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invoke</span>(schedule, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipe_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ my_pipe</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ my_pipe [6ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
<p>Check out the <a href="https://whipson.github.io/maestro/news/index.html">release notes</a> for more details on what’s new in version 0.3.0. If you find any bugs or want to suggest new features and improvements, please add them <a href="https://github.com/whipson/maestro/issues">here</a> or reach out to me on <a href="https://www.linkedin.com/in/will-hipson/">LinkedIn</a>.</p>
<p>Happy orchestrating!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-0-3-0/maestro-0-3-0.html</guid>
  <pubDate>Mon, 23 Sep 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>maestro 0.2.0</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-0-2-0/maestro-0-2-0.html</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-0-2-0/images/logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p><code>maestro</code> 0.2.0 brings with it new features for scheduling pipelines on specific hours, days, or months. With a few new tags, we have so much more versatility for scheduling.</p>
<p>If you haven’t heard of maestro, it’s a package that helps you schedule your R scripts all in a single project using tags. You can learn more about it <a href="../../posts/hello-maestro/hello-maestro.html">here</a>.</p>
<p>Get it from CRAN:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="new-maestrofrequency-syntax" class="level2">
<h2 class="anchored" data-anchor-id="new-maestrofrequency-syntax">New maestroFrequency Syntax</h2>
<p>The maestroFrequency tag used to be restrictive in how you specified your pipeline frequency, only accepting it in the form of [n] [units] like <code>1 day</code>, <code>4 hours</code>, <code>2 weeks</code>, etc. A more human-readable adverb option is now available. You can specify it as one of <code>hourly</code>, <code>daily</code>, <code>weekly</code>, <code>biweekly</code>, <code>monthly</code>, <code>quarterly</code> and <code>yearly</code>. Each of these is the equivalent of 1 [unit]. So, hourly = 1 hour.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example hourly pipeline</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb2-3">my_hourly_job <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb2-5">}</span></code></pre></div>
</div>
<p>You can also use this syntax in <code>run_schedule</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb3-4">  example_schedule,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hourly"</span></span>
<span id="cb3-6">)</span></code></pre></div>
</div>
<p>These frequencies are important not only for readability but they also combine with hour, day, and month specifiers for more bespoke scheduling.</p>
</section>
<section id="new-hours-days-months-specifiers" class="level2">
<h2 class="anchored" data-anchor-id="new-hours-days-months-specifiers">New Hours, Days, Months Specifiers</h2>
<p>Until now you could only run pipelines on regular intervals. With 0.2.0 you can specify particular hours, days, and months you want the pipelines to run. This is useful if you want to do something like have a job run only on business hours or just on weekends. 3 new tags <code>maestroHours</code>, <code>maestroDays</code>, and <code>maestroMonths</code> are available.</p>
<section id="specific-hours" class="level3">
<h3 class="anchored" data-anchor-id="specific-hours">Specific Hours</h3>
<p>Let’s say I have a pipeline I want to run during regular 9am-5pm business hours. I can use a maestroFrequency of hourly and specify the hours 9am through to 5pm:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example work hours pipeline</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroHours 9 10 11 12 13 14 15 16 17</span></span>
<span id="cb4-4">my_work_hours_job <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb4-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb4-6">}</span></code></pre></div>
</div>
<p>This will be UTC hours by default. If I want my timezone to be where I live I can specify <code>maestroTz America/Halifax</code>.</p>
</section>
<section id="specific-days" class="level3">
<h3 class="anchored" data-anchor-id="specific-days">Specific Days</h3>
<p>We can specify either days of week or days of month. Days of week use abbreviated weekdays like Mon, Wed, Sat; whereas days of month use integers 1, 10, 15, etc.</p>
<p>Taking the above example further, let’s have it run during business hours on weekdays:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example work hours pipeline</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroHours 9 10 11 12 13 14 15 16 17</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroDays Mon Tue Wed Thu Fri</span></span>
<span id="cb5-5">my_work_hours_job2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb5-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb5-7">}</span></code></pre></div>
</div>
</section>
<section id="specific-months" class="level3">
<h3 class="anchored" data-anchor-id="specific-months">Specific Months</h3>
<p>To specify the months use the integers 1-12. Let’s imagine that our pipeline only runs in March, June, October, and December:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example work hours pipeline</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroHours 9 10 11 12 13 14 15 16 17</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroDays Mon Tue Wed Thu Fri</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroMonths 3 6 10 12</span></span>
<span id="cb6-6">my_work_hours_job3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb6-8">}</span></code></pre></div>
</div>
<p>These specifiers must be used with -ly frequencies like hourly and daily. The type of specifier used must be at least the same as the base frequency. For example, we can’t use maestroHours on a pipeline with a daily frequency.</p>
</section>
</section>
<section id="improvements-to-suggest_orch_frequency" class="level2">
<h2 class="anchored" data-anchor-id="improvements-to-suggest_orch_frequency">Improvements to <code>suggest_orch_frequency</code></h2>
<p>The function <code>suggest_orch_frequency</code> takes a schedule generated from <code>build_schedule</code> and suggests the likely optimal frequency for the orchestrator. Until recently, this function was pretty basic and just suggested twice the amount of the highest frequency pipeline in the project. This wouldn’t work out well if you had pipelines staggered on different hours.</p>
<p>Now <code>suggest_orch_frequency</code> looks for the smallest interval of time between pipelines. It won’t consider hours, days, months specifiers though.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb7-2"></span>
<span id="cb7-3">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ 1 script successfully parsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suggest_orch_frequency</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1 day"</code></pre>
</div>
</div>
<p>Note that <code>suggest_orch_frequency</code> assumes that you want to run your pipelines <em>exactly</em> when you want them to - it won’t try to round to the nearest 15 minute or whatever.</p>
<p>Check out the <a href="https://whipson.github.io/maestro/news/index.html">release notes</a> for more details on what’s new in version 0.2.0. If you find any bugs or want to suggest new features and improvements, please add them <a href="https://github.com/whipson/maestro/issues">here</a> or reach out to me on <a href="https://www.linkedin.com/in/will-hipson/">LinkedIn</a>.</p>
<p>Happy orchestrating!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-0-2-0/maestro-0-2-0.html</guid>
  <pubDate>Tue, 27 Aug 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying a Maestro Project to Google Cloud Platform</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/maestro-gcp-deployment.html</link>
  <description><![CDATA[ 





<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/DALL·E 2024-06-24 13.13.56 - A very simple blueprint-style header image with a hand-drawn feel. Include only a single detailed sketch of a light bulb. The background should be a d.webp" class="img-fluid" alt="Blueprint style image showing lightbulbs"></p>
<p>In the previous post we saw how <code>maestro</code> helps orchestrate data pipelines in a single R project. For maestro to be useful you need to deploy it somewhere and these days that ‘somewhere’ is often cloud-based. Here we’ll walk through deploying a maestro project in the cloud on Google Cloud Platform (GCP).<sup>1</sup></p>
<p>This post assumes some familiarity with the <code>maestro</code> package although the practice of deploying on GCP can be generalized to almost any project. The previous <a href="../../posts/hello-maestro/hello-maestro.html">blog post</a> walks through maestro specifically.</p>
<p>This project is available on Github <a href="https://github.com/whipson/maestro_gcp">here</a>.</p>
<section id="design" class="level2">
<h2 class="anchored" data-anchor-id="design">Design</h2>
<p>Like any cloud offering, GCP gives us many different ways to solve the same problem.<sup>2</sup> My suggested design is by no means the only way nor is it necessarily the best way. I strove for simplicity. In the end, I landed on 3 GCP services needed to deploy the project:</p>
<ol type="1">
<li>Cloud Build for hosting the containerized project.</li>
<li>Cloud Run Jobs for executing the container.</li>
<li>Cloud Scheduler for scheduling the container to run.</li>
</ol>
<p>The most complicated of these is the first step and requires some familiarity with Docker (and ideally Github).</p>
</section>
<section id="dockerizing-maestro" class="level2">
<h2 class="anchored" data-anchor-id="dockerizing-maestro">Dockerizing Maestro</h2>
<p>The best way to ensure that our maestro project runs in the cloud with all its dependencies is to use Docker. Docker is widespread in software development these days and is practically a requirement for deploying anything. I won’t go over the fundamentals of Docker here (Alex Gold’s <em>DevOps for Data Science</em> has a <a href="https://do4ds.com/chapters/sec1/1-6-docker.html">Demystifying Docker</a> chapter that is very helpful if you’re new or rusty with Docker).</p>
<p>We need to create a <code>Dockerfile</code> at the root level of the project. I used <code>dockerfiler</code> for this. It has a function <code>dock_from_renv()</code> and it got me about 90% of the way there. As implied in the name you need to be using <code>renv</code>.<sup>3</sup></p>
<p>After using dockerfiler to generate the Dockerfile, I made some necessary tweaks. The main thing is to add a few system libraries and to add the <code>ENTRYPOINT ["Rscript", "orchestrator.R"]</code> so that Google Cloud Run knows to execute that script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dockerfile</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> rocker/r-ver</span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-4">    libxml2-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-5">    libcurl4-openssl-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-6">    libssl-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-7">    libsodium-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-8">    zlib1g-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-9">    pkg-config <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'install.packages("remotes")'</span></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'remotes::install_version("renv", version = "1.0.7")'</span></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /usr/src/app</span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . .</span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'renv::restore()'</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENTRYPOINT</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orchestrator.R"</span>]</span></code></pre></div>
<p>I also had to add some system libraries (<code>libcurl4-openssl-dev</code> for making the API requests). This part is a bit tedious and will depend on your situation. For instance, if you’re doing anything geospatial you may need lib-gdal. ChatGPT was pretty helpful when I ran into errors building my docker image.</p>
<p>This leads us to the next step: building the image and testing it in a container locally. This is where you can debug problems before you go to deploy to GCP.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> maestro_gcp .</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run maestro_gcp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--rm</span></span></code></pre></div>
</div>
</section>
<section id="creating-a-cloudbuild.yaml" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-cloudbuild.yaml">Creating a cloudbuild.yaml</h2>
<p>The cloudbuild.yaml is a configuration file for telling GCP what image to use and how to build it. Think of it as the link connecting your project to the place where the docker image will live in GCP. Full confession: ChatGPT helped me with this one:</p>
<pre><code>steps:
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/maestro-gcp', '.']
images:
- 'gcr.io/$PROJECT_ID/maestro-gcp'
options:
  logging: CLOUD_LOGGING_ONLY</code></pre>
<p>Name this file <code>cloudbuild.yaml</code> and add it to the root level of your project. At this point, you should have a project structure that looks something like this:</p>
<pre><code>.
├── Dockerfile
├── cloudbuild.yaml
├── maestro-gcp-deploy.Rproj
├── orchestrator.R
├── pipelines
├── renv
└── renv.lock</code></pre>
</section>
<section id="hosting-the-container-on-gcp" class="level2">
<h2 class="anchored" data-anchor-id="hosting-the-container-on-gcp">Hosting the Container on GCP</h2>
<p>The great thing about Cloud Build is you can host a project with a Dockerfile on Github and deploy it to GCP from there.</p>
<p>Create the Github repo and push the project code there. Then, in the GCP console and, inside of Cloud Build &gt; Triggers, select Connect Repository.</p>
<p>Once you open the Connect Repository wizard and select Github, it’ll step you through some authentication.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-build-success.png" class="img-fluid figure-img" alt="Screenshot of GCP Console showing successful cloud build."></p>
<figcaption>Successful Cloud Build in GCP Console.</figcaption>
</figure>
</div>
</section>
<section id="create-cloud-job-run" class="level2">
<h2 class="anchored" data-anchor-id="create-cloud-job-run">Create Cloud Job Run</h2>
<p>If your build was successful, congrats! You made it through the hardest part. We now go to Cloud Run Jobs.<sup>4</sup> Go to Create Job and browse through to find your recently build container.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-cloud-run-create.png" class="img-fluid figure-img" alt="Create Job wizard in GCP Console."></p>
<figcaption>Create Job wizard in GCP Console.</figcaption>
</figure>
</div>
<p>You may also want to select the box to ‘Execute job immediately’ to test that the container runs as expected.</p>
</section>
<section id="schedule-it" class="level2">
<h2 class="anchored" data-anchor-id="schedule-it">Schedule It</h2>
<p>We can stay right within the Cloud Run service to do the scheduling even though it is handled by Google Cloud Scheduler.</p>
<p>Click on your newly created job and then on Triggers &gt; Add Scheduler Trigger:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-schedule-create.png" class="img-fluid figure-img" alt="GCP Console showing Cloud Scheduler job."></p>
<figcaption>Adding a scheduler trigger to the cloud job.</figcaption>
</figure>
</div>
<p>The Frequency input uses cron syntax. You can use <a href="https://crontab.guru/">Crontab</a> to help specify the schedule. When it’s created you should see something below like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-trigger-created.png" class="img-fluid figure-img" alt="Screenshot of GCP Console showing successfully created scheduler job."></p>
<figcaption>Successfully created cron schedule for Cloud Run Job.</figcaption>
</figure>
</div>
<p>I like to trigger the job manually too to see how it runs, or you can just wait until the schedule kicks in.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-logs.png" class="img-fluid figure-img" alt="Screenshot of the GCP console showing the successful run of a scheduled job."></p>
<figcaption>Logs of the cloud run job.</figcaption>
</figure>
</div>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final Remarks</h2>
<p>And that about sums it up for the deployment. Cloud deployment is almost never a straightforward process, so be prepared for some failed attempts. I relied on ChatGPT when I ran into problems. My organization gives us access to ChatGPT 4o and it seems to have an excellent grasp of GCP. It tends to provide command line instructions rather than point-click in the GCP console, but this is for your benefit - it’s more reproducible and stable.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Why GCP and not AWS or Azure? We chose GCP for this initial post on deployment for two reasons. First is it has always free tiers for commonly used services. For lightweight use cases, you won’t have to worry about incurring a cloud bill. Another reason is I’ve found the learning curve for GCP much gentler compared to AWS and Azure. In general, GCP is much better at helping you do what you need to do at very little to no cost (for lightweight jobs).↩︎</p></li>
<li id="fn2"><p>Cloud providers are great at packaging the same fundamental activity in a million different ways. Try not to get overwhelmed with all the different services in GCP. Usually you’ll only ever make use of a few of the most common ones. Everything comes down to compute and storage.↩︎</p></li>
<li id="fn3"><p>Yes, I realize this may feel like a lot before we’ve even made it to GCP. While Docker and renv create additional work (and often frustration) up front, it truly is more beneficial when it comes to the actual deployment. Without Docker, setting up the runtime is an especially painful game of whack-a-mole. This doesn’t mean you won’t have to whack a few moles first though.↩︎</p></li>
<li id="fn4"><p>Make sure you choose Create Job and not Create Service. Services listen for HTTP requests whereas jobs can be triggered by a cron schedule.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>data engineering</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>deployment</category>
  <category>cloud</category>
  <category>tutorial</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/maestro-gcp-deployment.html</guid>
  <pubDate>Mon, 24 Jun 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Hello maestro</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/hello-maestro/hello-maestro.html</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/hello-maestro/images/logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I’m thrilled to announce the release of <code>maestro</code>, a new package for developing, scheduling, and monitoring data pipelines. Here, I’ll walk through what maestro does and why you’d want to use it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="the-motivation" class="level2">
<h2 class="anchored" data-anchor-id="the-motivation">The Motivation</h2>
<p>Let’s start with the <em>why</em>. Data engineers often have to manage multiple data pipelines - dozens or maybe even hundreds of pipelines. Scheduling and monitoring these pipelines in production poses challenges, particularly as the number of pipelines increases. Maestro takes a holistic approach by managing multiple independent pipelines in a single R project.<sup>1</sup> No need to maintain several R projects or use bulky orchestration tools.</p>
</section>
<section id="one-orchestrator-many-pipelines" class="level2">
<h2 class="anchored" data-anchor-id="one-orchestrator-many-pipelines">One Orchestrator, Many Pipelines</h2>
<p>There are two components to a maestro project: an orchestrator and a collection of pipelines. A pipeline is a function that performs a task, such as extracting data and then storing it somewhere. The goal of maestro is to manage (i.e., schedule and monitor) multiple pipelines. This is done using an orchestrator script. The orchestrator script runs maestro commands like <code>build_schedule()</code> and <code>run_schedule()</code> to execute the pipelines and monitor them.</p>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span></code></pre></div>
</div>
<p>It is best to use maestro in an R project. After installing the package, you can create a new project using <code>create_maestro()</code> or in RStudio &gt; New Project &gt; Maestro Project. You’ll find yourself in an R project with a structure like this:</p>
<pre><code>my_project_directory
├── orchestrator.R
└── pipelines
    └── my_pipe.R</code></pre>
<section id="our-first-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="our-first-pipeline">Our First Pipeline</h3>
<p>Let’s take a look at <code>my_pipe.R</code> that was created:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_pipe maestro pipeline</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency 1 day</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2024-06-03</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroTz UTC</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroLogLevel INFO</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">my_pipe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb4-9"></span>
<span id="cb4-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pipeline code</span></span>
<span id="cb4-11">}</span></code></pre></div>
</div>
<p>The script has been populated with R code to assign a function called my_pipe. The function has no code in the body so it won’t do anything just yet. Above the function declaration are some specially formatted code comments. These are maestro tags and they’re used to configure the scheduling and operation of the pipeline.<sup>2</sup></p>
<p>The tags most important for scheduling are <code>maestroFrequency</code> and <code>maestroStartTime</code>. <code>maestroFrequency</code> is how often to run the pipeline. It takes a number and a time unit, like 1 day, 3 hours, 15 minutes, or 6 months. <code>maestroStartTime</code> is a Date (yyyy-mm-dd) or timestamp (yyyy-mm-dd HH:MM:SS) indicating when the schedule starts.</p>
<p>Configuring the start time is important if you have specific times you want it to run. If, for example, you want the pipeline to run once daily at 12:30, you’d use <code>@maestroStartTime 2024-06-03 12:00:00</code> (note here that the date part doesn’t matter unless you schedule it in the future).</p>
<p>We won’t concern ourselves with the other tags for now; just know that there are more and they all have default values.</p>
<p>Now let’s get the pipeline to do something. In the spirit of typical data engineering tasks, we’ll create an ETL (Extract, Transform, Load) pipeline that gets data from a source, transforms it by adding a new column, and loads it into storage.</p>
</section>
<section id="making-a-useful-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="making-a-useful-pipeline">Making a Useful Pipeline</h3>
<p>We’ll use the open API from Environment Canada called <a href="https://api.weather.gc.ca/openapi?f=html">Geomet</a> for meteorological data and we’ll use DuckDB for storage. We’ll need the <code>httr2</code> and <code>duckdb</code> packages for extraction and storage, respectively.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Located in ./pipelines/my_pipe.R</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency 1 day</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2024-06-03</span></span>
<span id="cb5-4">geomet_stations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb5-5">  </span>
<span id="cb5-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formulate the request  </span></span>
<span id="cb5-7">  req <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">request</span>(</span>
<span id="cb5-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.weather.gc.ca/collections/climate-stations/items"</span></span>
<span id="cb5-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-10">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_url_query</span>(</span>
<span id="cb5-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limit =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb5-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skipGeometry =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-13">    )</span>
<span id="cb5-14">  </span>
<span id="cb5-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send the request and interpret the response</span></span>
<span id="cb5-16">  resp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> req <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-17">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_perform</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-18">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resp_body_json</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplifyVector =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-19">  </span>
<span id="cb5-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the properties element where the rectangular data is located</span></span>
<span id="cb5-21">  stations_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> resp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>properties</span>
<span id="cb5-22">  </span>
<span id="cb5-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean the names</span></span>
<span id="cb5-24">  stations_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stations_dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-25">    janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-26">    janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_empty</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">which =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rows"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cols"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-27">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">insert_time =</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">now</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tzone =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>)</span>
<span id="cb5-29">    )</span>
<span id="cb5-30">  </span>
<span id="cb5-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to a local in-memory duckdb</span></span>
<span id="cb5-32">  conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(duckdb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>())</span>
<span id="cb5-33">  </span>
<span id="cb5-34">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and write to a table</span></span>
<span id="cb5-35">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(</span>
<span id="cb5-36">    conn, </span>
<span id="cb5-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geomet_stations_transactional"</span>, </span>
<span id="cb5-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> stations_clean</span>
<span id="cb5-39">  )</span>
<span id="cb5-40">  </span>
<span id="cb5-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test that it worked in the return</span></span>
<span id="cb5-42">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb5-43">    conn, </span>
<span id="cb5-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    select * from geomet_stations_transactional</span></span>
<span id="cb5-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    order by insert_time desc</span></span>
<span id="cb5-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    limit 10</span></span>
<span id="cb5-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "</span></span>
<span id="cb5-49">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-50">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb5-51">  </span>
<span id="cb5-52">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbDisconnect</span>(conn)</span>
<span id="cb5-53">  </span>
<span id="cb5-54">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(</span>
<span id="cb5-55">    res</span>
<span id="cb5-56">  )</span>
<span id="cb5-57">}</span></code></pre></div>
</div>
</section>
<section id="orchestrate-it" class="level3">
<h3 class="anchored" data-anchor-id="orchestrate-it">Orchestrate It</h3>
<p>Now that we have a single useful pipeline, let’s orchestrate it (in practice, we’d probably have more than one pipeline). We’ll set the orchestrator to run at a daily frequency (this does not actually cause it to run daily, we need something else external to the R project to actually run it). For testing purposes, we’ll then run this interactively:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Located in ./orchestrator.R</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb6-3"></span>
<span id="cb6-4">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>()</span>
<span id="cb6-5"></span>
<span id="cb6-6">orch_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb6-7">  schedule,</span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 day"</span></span>
<span id="cb6-9">)</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color: #66C2CD;">ℹ</span> 1 script successfully parsed                                                  
                                                                                
── [2024-09-23 10:29:02]                                                        
Running pipelines <span style="color: #A8CC8C;">▶</span>                                                             
<span style="color: #A8CC8C;">✔</span> <span style="color: #71BEF2;">geomet_stations</span> <span style="color: #b8b8b8;">[566ms]</span>                                                       
                                                                                
── [2024-09-23 10:29:02]                                                        
Pipeline execution completed <span style="color: #6F7783;">■</span> | 0.57 sec elapsed                               
<span style="color: #A8CC8C;">✔</span> 1 success | <span style="color: #282D35;">→</span> 0 skipped | <span style="color: #D290E4;">!</span> 0 warnings | <span style="color: #E88388;">✖</span> 0 errors | <span style="color: #66C2CD;">◼</span> 1 total               
────────────────────────────────────────────────────────────────────────────────
                                                                                
── Next scheduled pipelines <span style="color: #66C2CD;">❯</span>                                                   
Pipe name | Next scheduled run                                                  
• geomet_stations | 2024-09-25                                                  
</pre>
</div>
</div>
</section>
</section>
<section id="deployment" class="level2">
<h2 class="anchored" data-anchor-id="deployment">Deployment</h2>
<p>Ok, so we ran the orchestrator interactively, but this is only useful for testing. In practice, we want to deploy this on a server and have it run every day. To be clear: maestro does <em>not</em> do this for you - it just assumes that you are doing this and behaves accordingly. In other words, when you declare <code>orch_frequency = "1 day"</code> you are saying that you <em>intend</em> to run the orchestrator every 1 day.</p>
<p>The first decision to make about deployment is local vs.&nbsp;cloud. If you own the server it’s local<sup>3</sup>, if you rent the hardware and connect to it remotely it’s cloud. Here, we’ll run through a straightforward local deployment because it requires less configuration and won’t cost you anything.</p>
<section id="maclinux-cronr" class="level4">
<h4 class="anchored" data-anchor-id="maclinux-cronr">Mac/Linux: cronR</h4>
<p>Cron is a job scheduler for the Mac/Linux systems. You can use <code>cronR</code> to interface with it via R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cronR)</span>
<span id="cb7-2"></span>
<span id="cb7-3">cmd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cron_rscript</span>(</span>
<span id="cb7-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orchestrator.R"</span>, </span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workdir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span>
<span id="cb7-6">)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cron_add</span>(</span>
<span id="cb7-9">  cmd, </span>
<span id="cb7-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"daily"</span>,</span>
<span id="cb7-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>,</span>
<span id="cb7-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ask =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb7-13">)</span></code></pre></div>
</div>
</section>
<section id="windows-taskscheduler" class="level4">
<h4 class="anchored" data-anchor-id="windows-taskscheduler">Windows: taskscheduleR</h4>
<p>Windows users can use <code>taskscheduleR</code> to schedule a job via R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(taskscheduleR)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">taskscheduler_create</span>(</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">taskname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>, </span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rscript =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orchestrator.R"</span>, </span>
<span id="cb8-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">schedule =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DAILY"</span>,</span>
<span id="cb8-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exec_path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span>
<span id="cb8-8">)</span></code></pre></div>
</div>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final Remarks</h2>
<p>In this post, we saw how maestro can be used to orchestrate multiple pipelines in a single R project. Maestro is in its early development, but I encourage you to try it out. We’re using it in production to orchestrate 18 production pipelines at the Halifax International Airport!</p>
<p>I’d be remiss not to mention a few caveats of maestro:</p>
<ol type="1">
<li>It should only be used for light-medium scale batch jobs. If you need to do streaming and/or heavy load jobs, it’s probably not for you.</li>
<li>Configuring the schedule for the orchestrator requires some thought. If you have several pipelines at different intervals and times you’ll want to choose a frequency that makes sense. You can use <code>suggest_orch_frequency()</code> to get a heuristic suggestion based on a schedule. Even then - you need to make sure you actually run the orchestrator at this frequency. Weird things happen if your orchestrator actually runs more or less frequently than you said it would.</li>
</ol>
<p>That said, I think maestro is great for small-medium sized pipeline orchestration. If you’re looking to deploy maestro on the cloud, this <a href="../../posts/maestro-gcp-deployment/maestro-gcp-deployment.html">blog post</a> will help you get started in Google Compute Platform (GCP).</p>
<section id="notes" class="level4">
<h4 class="anchored" data-anchor-id="notes">Notes</h4>
<p>This post was created using R version 4.4.1 (2024-06-14) and maestro version 0.3.0.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A popular R package for data pipelines that has been around for some time is <a href="https://docs.ropensci.org/targets/">targets</a>. Maestro is different from targets in that the focus of maestro is to orchestrate multiple <em>independent</em> data pipelines whereas targets is for a single connected pipeline. Maestro would be more suited toward ETL data engineering where targets is for complex analytics pipelines.↩︎</p></li>
<li id="fn2"><p>R users will recognize that maestro uses custom <a href="https://roxygen2.r-lib.org/">roxygen2</a> tags.↩︎</p></li>
<li id="fn3"><p>Yes, this includes your personal laptop or desktop; however, it probably goes to sleep when not used. If you’re using a Mac, you can use <code>pmset</code> in the command line to get around this (<a href="https://www.dssw.co.uk/reference/pmset/" class="uri">https://www.dssw.co.uk/reference/pmset/</a>).↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>data engineering</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>deployment</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/hello-maestro/hello-maestro.html</guid>
  <pubDate>Wed, 19 Jun 2024 03:00:00 GMT</pubDate>
</item>
</channel>
</rss>
