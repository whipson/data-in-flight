<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>data-in-flight</title>
<link>https://whipson.github.io/data-in-flight/#category=R</link>
<atom:link href="https://whipson.github.io/data-in-flight/index-r.xml" rel="self" type="application/rss+xml"/>
<description>scrappy data engineering</description>
<generator>quarto-1.7.13</generator>
<lastBuildDate>Wed, 26 Feb 2025 04:00:00 GMT</lastBuildDate>
<item>
  <title>You Don’t Need Airflow: Orchestrate Many Data Flows in R with Maestro</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/you-dont-need-airflow/main.html</link>
  <description><![CDATA[ 





<p>Data never stays in one place for long. Any business or team that works with data needs to be thinking about how data moves from one place to the next. This often happens multiple times, continuously, and in multiple different streams. The concept of moving data is data flow<sup>1</sup>. When you have many data flows that need to be managed it’s called data orchestration. More specifically, data orchestration is the process of automating the ingestion, transformation, and analysis of data from multiple different locations and then making it widely accessible to users.</p>
<p>If you look at data orchestration tools today you are bombarded with a dizzying array of software platforms that claim unsurpassed processing capability, AI-readiness, elegant UIs, etc. Apache Airflow is just one example of a popular orchestration platform that scales to meet virtually any orchestration need. And while these claims may be true, I argue it is rarely the case that these gargantuan platforms are needed in the first place. For most data engineers, you probably only need to process a moderate amount of data at a moderate time scale. Moreover, if you’re an R user, you don’t want to have to define your data pipelines using drag-and-drop tools or learn another programming language. Not only will this reduce cloud costs but also development time costs.</p>
<p>This was the inspiration for <a href="https://whipson.github.io/maestro/">maestro</a> - an R package for orchestrating data jobs within a single project. Here I’ll demonstrate a maestro project and how the cost of deploying it likely compares to other data orchestration platforms currently available.</p>
<p>In this example, I’ll use open data from Cornell Lab’s <a href="https://documenter.getpostman.com/view/664302/S1ENwy59">eBird API</a> providing free access to global bird observations and statistics. Note that a user account and API key are required to access the API.</p>
<section id="maestro" class="level2">
<h2 class="anchored" data-anchor-id="maestro">Maestro</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Check out the <a href="https://whipson.github.io/maestro/index.html">maestro docs</a> for a more detailed introduction to maestro.</p>
</div>
</div>
<p>A maestro project consists of one or more pipelines (i.e., R functions with roxygen tags) and a single orchestrator script responsible for invoking the pipelines according to a schedule.</p>
<p>The project structure will look something like this:</p>
<pre><code>sample_project
├── orchestrator.R
└── pipelines
    ├── get_nearby_notable_obs.R
    ├── get_region_stats.R
    └── get_species_list.R</code></pre>
<section id="pipelines" class="level3">
<h3 class="anchored" data-anchor-id="pipelines">Pipelines</h3>
<p>I’ve created three pipelines that each retrieve data from one of the eBird endpoints and stores it in a <a href="https://motherduck.com/duckdb-book-brief/?utm_campaign=manning4&amp;utm_medium=paid&amp;utm_source=google&amp;utm_content=sponsored_ad&amp;utm_term=duckdb&amp;utm_campaign=DuckDB+In+Action+%7C+Landing+Page+Test+%7C+US+%26+Canada&amp;utm_source=adwords&amp;utm_medium=ppc&amp;hsa_acc=6957541599&amp;hsa_cam=21716136677&amp;hsa_grp=169023858473&amp;hsa_ad=713954371320&amp;hsa_src=g&amp;hsa_tgt=kwd-1637281685009&amp;hsa_kw=duckdb&amp;hsa_mt=b&amp;hsa_net=adwords&amp;hsa_ver=3&amp;gad_source=1&amp;gclid=CjwKCAiA5eC9BhAuEiwA3CKwQtsR_YIV8w9EBIUbZZ_djYTL8VL-IBkFtuXNYHIaidYECqq_EbI7HRoCprMQAvD_BwE">duckdb</a> table. Each pipeline is scheduled to run at a particular time interval so that new data is regularly inserted into the table.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>#' @maestroFrequency</code> is one of several tags that can be used to configure the scheduling of the pipeline. See <a href="https://whipson.github.io/maestro/articles/maestro-1-quick-start.html#anatomy-of-a-pipeline">here</a> for more details.</p>
</div>
</div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">get_nearby_notable_obs.R</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">get_region_stats.R</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">get_species_list.R</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency 3 hours</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2025-02-20 12:00:00</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroTz America/Halifax</span></span>
<span id="cb2-4">get_nearby_notable_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-5"></span>
<span id="cb2-6">  req <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">request</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.ebird.org/v2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-7">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_url_path_append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/obs/geo/recent/notable"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-8">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_url_query</span>(</span>
<span id="cb2-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lat =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.88</span>,</span>
<span id="cb2-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lng =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">63.52</span></span>
<span id="cb2-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-12">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_headers</span>(</span>
<span id="cb2-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X-eBirdApiToken</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EBIRD_API_KEY"</span>)</span>
<span id="cb2-14">    )</span>
<span id="cb2-15"></span>
<span id="cb2-16">  resp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> req <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-17">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_perform</span>()</span>
<span id="cb2-18"></span>
<span id="cb2-19">  obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> resp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-20">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resp_body_json</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplifyVector =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-21">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">insert_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb2-23">    )</span>
<span id="cb2-24"></span>
<span id="cb2-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to a local in-memory duckdb</span></span>
<span id="cb2-26">  conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(duckdb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>())</span>
<span id="cb2-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbDisconnect</span>(conn))</span>
<span id="cb2-28"></span>
<span id="cb2-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and write to a table</span></span>
<span id="cb2-30">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(</span>
<span id="cb2-31">    conn,</span>
<span id="cb2-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recent_notable_observations"</span>,</span>
<span id="cb2-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> obs,</span>
<span id="cb2-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-35">  )</span>
<span id="cb2-36">}</span></code></pre></div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency 1 day</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2025-02-20 18:00:00</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroTz America/Halifax</span></span>
<span id="cb3-4">get_region_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb3-5"></span>
<span id="cb3-6">  now <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb3-7">  cur_year <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(now)</span>
<span id="cb3-8">  cur_month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(now)</span>
<span id="cb3-9">  cur_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">day</span>(now)</span>
<span id="cb3-10"></span>
<span id="cb3-11">  req <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">request</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.ebird.org/v2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-12">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_url_path_append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"product/stats"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CA-NS"</span>, cur_year, cur_month, cur_day) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-13">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_headers</span>(</span>
<span id="cb3-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X-eBirdApiToken</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EBIRD_API_KEY"</span>)</span>
<span id="cb3-15">    )</span>
<span id="cb3-16"></span>
<span id="cb3-17">  resp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> req <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-18">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_perform</span>()</span>
<span id="cb3-19"></span>
<span id="cb3-20">  stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> resp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-21">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resp_body_json</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplifyVector =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-22">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb3-23"></span>
<span id="cb3-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to a local in-memory duckdb</span></span>
<span id="cb3-25">  conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(duckdb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>())</span>
<span id="cb3-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbDisconnect</span>(conn))</span>
<span id="cb3-27"></span>
<span id="cb3-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and write to a table</span></span>
<span id="cb3-29">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(</span>
<span id="cb3-30">    conn,</span>
<span id="cb3-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"region_stats"</span>,</span>
<span id="cb3-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> stats,</span>
<span id="cb3-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-34">  )</span>
<span id="cb3-35">}</span></code></pre></div>
</div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency 1 day</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2025-02-20 15:00:00</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroTz America/Halifax</span></span>
<span id="cb4-4">get_species_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb4-5"></span>
<span id="cb4-6">  req <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">request</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.ebird.org/v2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-7">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_url_path_append</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"product/spplist"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CA-NS"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-8">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_headers</span>(</span>
<span id="cb4-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X-eBirdApiToken</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EBIRD_API_KEY"</span>)</span>
<span id="cb4-10">    )</span>
<span id="cb4-11"></span>
<span id="cb4-12">  resp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> req <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-13">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_perform</span>()</span>
<span id="cb4-14"></span>
<span id="cb4-15">  spec_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> resp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-16">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resp_body_json</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplifyVector =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-17"></span>
<span id="cb4-18">  spec_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">speciesCode =</span> spec_list</span>
<span id="cb4-20">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-21">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">insert_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb4-23">    )</span>
<span id="cb4-24"></span>
<span id="cb4-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to a local in-memory duckdb</span></span>
<span id="cb4-26">  conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(duckdb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>())</span>
<span id="cb4-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbDisconnect</span>(conn))</span>
<span id="cb4-28"></span>
<span id="cb4-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and write to a table</span></span>
<span id="cb4-30">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(</span>
<span id="cb4-31">    conn,</span>
<span id="cb4-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species_list"</span>,</span>
<span id="cb4-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> spec_df,</span>
<span id="cb4-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-35">  )</span>
<span id="cb4-36">}</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
<section id="orchestrator" class="level3">
<h3 class="anchored" data-anchor-id="orchestrator">Orchestrator</h3>
<p>With the pipelines created we move to the orchestrator script. This is an R script or Quarto document that runs maestro functions to create the schedule from the tags and the run the schedule according to some frequency - a frequency that should always be at least as frequent as your most frequent pipeline.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb5-2"></span>
<span id="cb5-3">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ 3 scripts successfully parsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb7-2">  schedule, </span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 hour"</span>,</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check_datetime =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-02-26 15:00:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America/Halifax"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility - in practice use Sys.time()</span></span>
<span id="cb7-5">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
── [2025-02-26 15:14:23]
Running pipelines ▶ 
ℹ get_nearby_notable_obs
✔ get_nearby_notable_obs [758ms]

ℹ get_species_list
✔ get_species_list [108ms]


── [2025-02-26 15:14:24]
Pipeline execution completed ■ | 0.885 sec elapsed 
✔ 2 successes | → 1 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total
────────────────────────────────────────────────────────────────────────────────

── Next scheduled pipelines ❯ 
Pipe name | Next scheduled run
• get_nearby_notable_obs | 2025-02-26 22:00:00
• get_region_stats | 2025-02-26 22:00:00
• get_species_list | 2025-02-27 19:00:00

── Maestro Schedule with 3 pipelines:  
• Success</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">status <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_status</span>(schedule)</span>
<span id="cb9-2">status</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  pipe_name  script_path invoked success pipeline_started    pipeline_ended     
  &lt;chr&gt;      &lt;chr&gt;       &lt;lgl&gt;   &lt;lgl&gt;   &lt;dttm&gt;              &lt;dttm&gt;             
1 get_nearb… ./pipeline… TRUE    TRUE    2025-02-26 19:14:23 2025-02-26 19:14:24
2 get_regio… ./pipeline… FALSE   FALSE   NA                  NA                 
3 get_speci… ./pipeline… TRUE    TRUE    2025-02-26 19:14:24 2025-02-26 19:14:24
# ℹ 4 more variables: errors &lt;int&gt;, warnings &lt;int&gt;, messages &lt;int&gt;,
#   next_run &lt;dttm&gt;</code></pre>
</div>
</div>
<p>We can run all this interactively, but the power of maestro is in running it scheduled in production. This way, the data will grow and update regularly. Deployment is not special in the case of maestro - you just need to be sure that the orchestrator is scheduled to run at the same frequency as specified in <code>orch_frequency</code>. Check out my <a href="../../posts/maestro-gcp-deployment/maestro-gcp-deployment.html">previous post</a> for a walk through of deployment on Google Cloud.</p>
</section>
</section>
<section id="monitoring" class="level2">
<h2 class="anchored" data-anchor-id="monitoring">Monitoring</h2>
<p>In production it is essential to monitor the status of data flows so that issues can be identified and resolved. There are a few extra steps to set this up for maestro:</p>
<ol type="1">
<li>Store results of <code>get_status()</code> in a separate table.</li>
<li>Create and host a visualization/dashboard with the pipeline statuses.</li>
</ol>
<p>Step 1 will involve adding a few lines of code in the orchestrator script. In our example using duckdb, it looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">status <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_status</span>(schedule)</span>
<span id="cb11-2"></span>
<span id="cb11-3">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(duckdb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>())</span>
<span id="cb11-4"></span>
<span id="cb11-5">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(</span>
<span id="cb11-6">  conn,</span>
<span id="cb11-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro_status"</span>,</span>
<span id="cb11-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> status,</span>
<span id="cb11-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb11-10">)</span>
<span id="cb11-11"></span>
<span id="cb11-12">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbDisconnect</span>(conn)</span></code></pre></div>
</div>
<p>Here, I’ll simulate multiple runs of the orchestrator to make it seem like it had been running for a few days. In practice, you would just read the table containing the pipeline statuses.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span>)</span>
<span id="cb12-2">n_runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb12-3">last_run <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-02-26 15:00:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America/Halifax"</span>)</span>
<span id="cb12-4">run_seq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> last_run <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hours</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_runs)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This leverages the lower-level MaestroPipeline class. This is almost never needed in practice</span></span>
<span id="cb12-7">status_extended_ls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(schedule<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>PipelineList<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MaestroPipelines, \(x) {</span>
<span id="cb12-8">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(run_seq, \(y) {</span>
<span id="cb12-9">    pipe_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pipe_name</span>()</span>
<span id="cb12-10">    run_pipe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_timeliness</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_unit =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hour"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check_datetime =</span> y)</span>
<span id="cb12-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (run_pipe) {</span>
<span id="cb12-12">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipe_name =</span> pipe_name,</span>
<span id="cb12-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invoked =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb12-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)),</span>
<span id="cb12-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipeline_started =</span> y,</span>
<span id="cb12-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipeline_ended =</span> pipeline_started <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seconds</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb12-18">      )</span>
<span id="cb12-19">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb12-20">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-21">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipe_name =</span> pipe_name,</span>
<span id="cb12-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invoked =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb12-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb12-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipeline_started =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb12-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipeline_ended =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb12-26">      )</span>
<span id="cb12-27">    }</span>
<span id="cb12-28">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-29">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>()</span>
<span id="cb12-30">})</span>
<span id="cb12-31"></span>
<span id="cb12-32">status_extended_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>(status_extended_ls)</span></code></pre></div>
</details>
</div>
<p>There are many ways to visualize the status of pipelines. If the number of pipelines is small and your time window is similarly small you can get away with a static <em>ggplot.</em> The code below uses the simulated status data.frame to generate a simple Gantt chart where green indicates success and red failure.</p>
<div class="cell">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb13-2"></span>
<span id="cb13-3">status_extended_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pipeline_started, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> pipeline_ended, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> success)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seagreen3"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>pipe_name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb13-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb13-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb13-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pipeline Status"</span></span>
<span id="cb13-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb13-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb13-17">  )</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/you-dont-need-airflow/main_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As the number of pipelines grows and/or you want more flexibility around time frame, you may want to build a dashboard with interactive figures. The below image is a screenshot of the dashboard I built using shiny at Halifax Stanfield International Airport that monitors the ~20 production pipelines in our environment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/you-dont-need-airflow/images/maestro-pipeline-monitor.png" class="img-fluid figure-img"></p>
<figcaption>Pipeline monitoring dashboard used in production at Halifax Stanfield International Airport</figcaption>
</figure>
</div>
<p>It’s not hard to imagine a future extension package that creates these sorts of monitoring dashboards automatically.</p>
<p>Now that we’ve seen how maestro works, let’s look at why we might want to use maestro over something like Airflow.</p>
</section>
<section id="maestro-reduces-cost" class="level2">
<h2 class="anchored" data-anchor-id="maestro-reduces-cost">Maestro Reduces Cost</h2>
<p>If you’re an R developer, the answer to the question <em>Why use Maestro</em> is obvious: <em>because I don’t need to use another language</em>. However, there are other reasons for preferring maestro over enterprise orchestration software like Airflow or Mage, chief among these being cost.<sup>2</sup></p>
<p>There are two primary reasons why maestro saves on cloud bills:</p>
<ol type="1">
<li><strong>Maestro is serverless</strong> - it can scale down to zero when the orchestrator is not running. In other words, if the orchestrator frequency isn’t too high (~15 minutes or more) you don’t need to run it on a continuously available server. Something like AWS Lambda, Google Cloud Run, or Azure Functions would work just fine.</li>
<li><strong>Maestro bundles multiple flows into a single instance</strong>. Assuming the number of flows and their frequencies doesn’t exceed limits you can run a moderate enterprise entirely within a single instance. No need to spin up and schedule separate instances for each data flow.<sup>3</sup></li>
</ol>
<p>Let’s compare a few scenarios for cost estimates. In all cases, we’ll imagine we have 10 production data flows that run at various intervals ranging from every hour to every day. The scenarios are:</p>
<ol type="1">
<li>Maestro running serverless every 1 hour</li>
<li>Separate scripts running serverless on separate instances</li>
<li>Running an Airflow project open-source in the cloud</li>
<li>Orchestration platform provided by the cloud provider</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>These are back-of-the-napkin estimates based on conversations with ChatGPT and cloud computing documentation. Do not use these estimates as the sole basis for determining which tech stack will be more affordable. If I have made egregious errors in my estimates, please reach out to me via LinkedIn.</p>
</div>
</div>
<p>I asked ChatGPT to provide estimates not specific to any one cloud provider (see appendix ChatGPT Conversation for conversation). The monthly costs in CAD are listed below:</p>
<ol type="1">
<li>Maestro-style serverless: <strong>$25-35</strong> ($35-45 if using multi-core)</li>
<li>Separate scheduled serverless scripts: <strong>$110-130</strong></li>
<li>Airflow: <strong>$170–200</strong></li>
<li>Cloud managed: <strong>$80–100</strong></li>
</ol>
<p>This suggests a substantial cost savings for using a maestro-style architecture. Please note that these are estimates and are not substantiated by any experimentation. It’s worth considering that the costs appear to take into account storage but probably don’t account for image hosting, CI/CD, out-of-the-box monitoring, etc. that would likely come with fully featured orchestration platforms.</p>
</section>
<section id="maestro-eases-configuration-and-bolsters-metadata" class="level2">
<h2 class="anchored" data-anchor-id="maestro-eases-configuration-and-bolsters-metadata">Maestro Eases Configuration and Bolsters Metadata</h2>
<p>One of the challenges of orchestrating multiple data flows is keeping track of scheduling. Maestro eases this burden by requiring the scheduling configuration to be exactly where the pipeline is. This is not a new concept (Dagster uses decorators for scheduling) but it is rare to find in other platforms.<sup>4</sup> This also follows the practice of infrastructure-as-code which makes projects more portable and reproducible.</p>
<p>I’m also discovering a new advantage to declaring pipeline configuration with the pipeline code itself, and that is it makes it more AI-interpretable. In my own environment at the airport, I’m looking for ways to reduce and even eliminate manual effort to document tables and processes. In our informal explorations, we’ve found that giving an LLM sample data and pipeline code is enough to populate almost all the critical metadata around table descriptions, column descriptions, and update frequency even for domain-specific processes. I’m hopeful that this will greatly cutback on the amount of manual documentation and metadata entry that no one wants to do anyway.</p>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>Here we saw how a single, cost-efficient maestro project can meet data orchestration needs for a moderate enterprise. Too often, I see people arguing on LinkedIn that if you’re a data engineer you need to use Airflow, or Spark, or [insert next trendy orchestration platform here]. The people who say this are usually trying to inflate their ego, sell you something, or they work for companies processing terabytes of data a minute and thus genuinely need a beastly platform. Most organizations don’t need that kind of power. In the end, it’s important to right-size the hardware and compute resources for the actual compute needs of your project. At the very least, if you’re an R user facing the conundrum of how to orchestrate your scripts, maestro is a great way to start familiar, start small, but with the potential to scale up to meet most of your needs.</p>
<p>This post was created using R version 4.4.2 (2024-10-31) and maestro version 0.5.1.</p>
</section>
<section id="appendices" class="level2">
<h2 class="anchored" data-anchor-id="appendices">Appendices</h2>
<section id="chatgpt-conversation" class="level3">
<h3 class="anchored" data-anchor-id="chatgpt-conversation">ChatGPT Conversation</h3>
<p>The conversation below was with ChatGPT 4-o on February 26th 2025.</p>
<p>Me: I want to do some cost estimates for cloud computing. I have three proposed tech stacks, all of which I could run on any cloud provider. I don’t want to compare cloud providers but instead compare the estimated cost of each architecture. In all cases, the project would involve taking 10 data flows that process around 500MB-2GB of data at varying time intervals with the most frequent being every hour and the least being every day. These data flows could be Python or R scripts or something else depending on the tech stack.</p>
<p>Here are the three proposed tech stacks:</p>
<ol type="1">
<li>All 10 data flows run on a single instance and an orchestrator script runs every hour to determine which script to run. Importantly, all of this runs on a single serverless instance.</li>
<li>Each 10 data flow has its own serverless instance and a scheduling service from the cloud provider is used to configure each script to run at its required time interval.</li>
<li>An open-source Apache Airflow project is hosted on a compute instance.</li>
<li>An orchestration platform provided by the cloud provider is used out of the box.</li>
</ol>
<p>For each scenario, provide some estimate as to the hardware requirements (e.g., instance size, compute nodes, etc.) and give a rough estimate of monthly cost in CAD.</p>
<blockquote class="blockquote">
<p>I’ll break down the estimated cloud costs for each of the four approaches based on typical cloud pricing. Since we’re not comparing cloud providers directly, I’ll use common pricing models across AWS, GCP, and Azure. Prices will be in <strong>CAD</strong>.</p>
<hr>
<h3 id="approach-1-single-serverless-instance-for-all-data-flows" class="anchored"><strong>Approach 1: Single Serverless Instance for All Data Flows</strong></h3>
<ul>
<li><p><strong>Hardware Requirements:</strong></p>
<ul>
<li><p>One serverless instance that scales based on workload.</p></li>
<li><p>Needs at least <strong>2 vCPUs and 4GB RAM</strong>, but scales up if a heavy script runs.</p></li>
<li><p>~2GB of storage for script dependencies.</p></li>
<li><p>Assumes processing 500MB-2GB per run.</p></li>
</ul></li>
<li><p><strong>Cost Breakdown:</strong></p>
<ul>
<li><p><strong>Compute:</strong> <del>$0.000016 per second per vCPU (</del>$0.06 per vCPU-hour)</p></li>
<li><p><strong>Memory:</strong> <del>$0.0000025 per second per GB (</del>$0.009 per GB-hour)</p></li>
<li><p>Assuming each flow runs for an <strong>average of 5 minutes</strong> and scales up to <strong>4 vCPUs and 8GB RAM</strong> occasionally:</p>
<ul>
<li><p>10 flows × 24 runs/day × 30 days = <strong>7,200 runs/month</strong></p></li>
<li><p>Avg runtime: 5 min per run = <strong>36,000 minutes per month</strong> = <strong>600 hours</strong></p></li>
<li><p>At <strong>$0.06 per vCPU-hour</strong>, 2 vCPUs cost <strong>$72/month</strong>.</p></li>
<li><p>At <strong>$0.009 per GB-hour</strong>, 4GB RAM costs <strong>$21.6/month</strong>.</p></li>
</ul></li>
<li><p><strong>Storage &amp; Data Transfer:</strong> Minimal, say <strong>$5/month</strong>.</p></li>
</ul>
<p><strong>Estimated Cost: $100–120 CAD/month</strong></p></li>
</ul>
<hr>
<h3 id="approach-2-separate-serverless-instance-for-each-data-flow" class="anchored"><strong>Approach 2: Separate Serverless Instance for Each Data Flow</strong></h3>
<ul>
<li><p><strong>Hardware Requirements:</strong></p>
<ul>
<li><p>Each of the <strong>10 data flows</strong> has its own <strong>serverless function</strong>.</p></li>
<li><p>Similar compute and memory needs as Approach 1 but scaled per function.</p></li>
<li><p>A <strong>cloud scheduling service</strong> (e.g., AWS EventBridge, Azure Logic Apps, or GCP Cloud Scheduler) triggers them.</p></li>
</ul></li>
<li><p><strong>Cost Breakdown:</strong></p>
<ul>
<li><p>Compute per function: Assume <strong>same 5 minutes per run</strong>.</p></li>
<li><p>10 functions × 24 runs/day × 30 days = <strong>7,200 total executions</strong>.</p></li>
<li><p>If each function scales to <strong>2 vCPUs and 4GB RAM</strong> per run:</p>
<ul>
<li><p>At <strong>$0.06 per vCPU-hour</strong>, cost per function = <strong>$7.2/month</strong> × 10 = <strong>$72/month</strong>.</p></li>
<li><p>At <strong>$0.009 per GB-hour</strong>, cost per function = <strong>$2.16/month</strong> × 10 = <strong>$21.6/month</strong>.</p></li>
</ul></li>
<li><p><strong>Scheduling service:</strong> ~$5/month.</p></li>
<li><p><strong>Storage &amp; Data Transfer:</strong> ~$10/month.</p></li>
</ul>
<p><strong>Estimated Cost: $110–130 CAD/month</strong></p></li>
</ul>
<hr>
<h3 id="approach-3-apache-airflow-on-a-compute-instance" class="anchored"><strong>Approach 3: Apache Airflow on a Compute Instance</strong></h3>
<ul>
<li><p><strong>Hardware Requirements:</strong></p>
<ul>
<li><p>1 compute instance for <strong>Airflow scheduler and web server</strong>: <strong>2 vCPUs, 4GB RAM</strong>.</p></li>
<li><p>1 compute instance for <strong>Airflow worker</strong>: <strong>4 vCPUs, 8GB RAM</strong>.</p></li>
<li><p>10 tasks run dynamically on the worker.</p></li>
</ul></li>
<li><p><strong>Cost Breakdown:</strong></p>
<ul>
<li><p><strong>Compute:</strong></p>
<ul>
<li><p>Scheduler instance: <strong>$50–60/month</strong>.</p></li>
<li><p>Worker instance: <strong>$80–100/month</strong>.</p></li>
</ul></li>
<li><p><strong>Storage &amp; Networking:</strong> ~$10/month.</p></li>
<li><p><strong>Managed Database (PostgreSQL for metadata):</strong> ~$30/month.</p></li>
</ul>
<p><strong>Estimated Cost: $170–200 CAD/month</strong></p></li>
</ul>
<hr>
<h3 id="approach-4-cloud-providers-managed-orchestration-service" class="anchored"><strong>Approach 4: Cloud Provider’s Managed Orchestration Service</strong></h3>
<ul>
<li><p><strong>Hardware Requirements:</strong></p>
<ul>
<li><p>Fully managed service.</p></li>
<li><p>Underlying compute managed by the provider (often charged per task execution).</p></li>
<li><p>Assumes a <strong>pay-per-task execution model</strong>.</p></li>
</ul></li>
<li><p><strong>Cost Breakdown:</strong></p>
<ul>
<li><p><strong>Task Execution Pricing:</strong> ~<strong>$0.0025–$0.005 per task execution</strong>.</p></li>
<li><p>7,200 runs × <strong>$0.003</strong> = <strong>$22/month</strong>.</p></li>
<li><p><strong>Compute Costs:</strong> (~$50/month for light usage, scales if workflows are complex).</p></li>
<li><p><strong>Storage &amp; API Calls:</strong> ~$5–10/month.</p></li>
</ul>
<p><strong>Estimated Cost: $80–100 CAD/month</strong></p></li>
</ul>
<hr>
<h3 id="summary-of-estimated-monthly-costs-cad" class="anchored"><strong>Summary of Estimated Monthly Costs (CAD)</strong></h3>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Approach</th>
<th>Estimated Monthly Cost (CAD)</th>
<th>Key Considerations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>1. Single Serverless Instance</strong></td>
<td><strong>$100–120</strong></td>
<td>Simple but limited scalability.</td>
</tr>
<tr class="even">
<td><strong>2. Separate Serverless Instances</strong></td>
<td><strong>$110–130</strong></td>
<td>More parallelism but increased function calls.</td>
</tr>
<tr class="odd">
<td><strong>3. Apache Airflow on Compute</strong></td>
<td><strong>$170–200</strong></td>
<td>More control, but higher infra cost.</td>
</tr>
<tr class="even">
<td><strong>4. Cloud Managed Orchestration</strong></td>
<td><strong>$80–100</strong></td>
<td>Scalable and cost-efficient.</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="recommendation" class="anchored"><strong>Recommendation</strong></h3>
<ul>
<li><p><strong>If cost is the main factor</strong> → <strong>Approach 4</strong> (Managed Orchestration) is best.</p></li>
<li><p><strong>If you prefer full control</strong> → <strong>Approach 3</strong> (Airflow).</p></li>
<li><p><strong>If you need balance between control and scalability</strong> → <strong>Approach 2</strong> (Separate Serverless Instances).</p></li>
</ul>
</blockquote>
<p>Me: In the first scenario are you properly accounting for the fact that the job would only run once every hour? Even if there are multiple processes being executed, it is still one job scheduled to run hourly.</p>
<blockquote class="blockquote">
<p>You’re absolutely right! In <strong>Scenario 1 (Single Serverless Instance Running an Orchestrator Script Hourly)</strong>, the <strong>orchestrator script only runs once per hour</strong>, making the cost lower than I initially estimated. Let’s correct that calculation.</p>
<hr>
<h3 id="scenario-1-revised-cost-calculation" class="anchored"><strong>Scenario 1: Revised Cost Calculation</strong></h3>
<ul>
<li><p><strong>Execution Frequency:</strong></p>
<ul>
<li><p>The orchestrator runs <strong>once every hour</strong> → <strong>24 runs per day</strong>.</p></li>
<li><p>Each run executes <strong>one or more data flows sequentially</strong>.</p></li>
<li><p>Assume an <strong>average runtime of 10 minutes per execution</strong> (to process multiple flows).</p></li>
</ul></li>
<li><p><strong>Compute Usage:</strong></p>
<ul>
<li><p>Suppose the instance scales between <strong>2–4 vCPUs and 4–8GB RAM</strong>, depending on the workload.</p></li>
<li><p>At peak, assume <strong>2 vCPUs and 4GB RAM</strong> for the <strong>entire execution</strong>.</p></li>
<li><p>Cost estimation:</p>
<ul>
<li><p><strong>24 runs/day × 30 days = 720 runs/month</strong>.</p></li>
<li><p><strong>10 minutes per run</strong> = <strong>7,200 minutes per month</strong> = <strong>120 compute hours/month</strong>.</p></li>
<li><p>Compute cost: <strong>$0.06 per vCPU-hour</strong> × <strong>2 vCPUs</strong> × <strong>120 hours</strong> = <strong>$14.40/month</strong>.</p></li>
<li><p>Memory cost: <strong>$0.009 per GB-hour</strong> × <strong>4GB</strong> × <strong>120 hours</strong> = <strong>$4.32/month</strong>.</p></li>
</ul></li>
</ul></li>
<li><p><strong>Storage &amp; Data Transfer:</strong></p>
<ul>
<li><p>Storage: <strong>~$5/month</strong>.</p></li>
<li><p>Data transfer: <strong>~$5/month</strong>.</p></li>
</ul></li>
</ul>
<p><strong>Total Estimated Cost: $25–35 CAD/month</strong></p>
<hr>
<h3 id="updated-cost-comparison-cad" class="anchored"><strong>Updated Cost Comparison (CAD)</strong></h3>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Approach</th>
<th>Updated Monthly Cost (CAD)</th>
<th>Key Considerations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>1. Single Serverless Instance</strong></td>
<td><strong>$25–35</strong> ✅</td>
<td>Most cost-effective but limited parallelism.</td>
</tr>
<tr class="even">
<td><strong>2. Separate Serverless Instances</strong></td>
<td><strong>$110–130</strong></td>
<td>More parallelism but higher function call costs.</td>
</tr>
<tr class="odd">
<td><strong>3. Apache Airflow on Compute</strong></td>
<td><strong>$170–200</strong></td>
<td>Full control but highest infra cost.</td>
</tr>
<tr class="even">
<td><strong>4. Cloud Managed Orchestration</strong></td>
<td><strong>$80–100</strong></td>
<td>Scalable and cost-efficient.</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="final-thoughts" class="anchored"><strong>Final Thoughts</strong></h3>
<ul>
<li><p><strong>Scenario 1 is now clearly the cheapest option (~$25–35 CAD/month).</strong></p></li>
<li><p>However, it <strong>lacks parallelism</strong>—if multiple heavy processes need to run, the single instance might <strong>take longer to complete</strong>.</p></li>
<li><p>If <strong>cost is the priority</strong>, Scenario 1 is the best choice.</p></li>
<li><p>If <strong>scalability and efficiency</strong> matter, Scenario 4 (Managed Orchestration) is a good balance.</p></li>
</ul>
<p>Would you like a <strong>cost efficiency vs.&nbsp;performance trade-off chart</strong> to visualize these differences? 🚀</p>
</blockquote>
<p>Me: Finally, let’s say for Scenario 1 that we enable parallel processing if needed. For example, if 4 processes need to run simultaneously it can scale up to 4 cores.</p>
<blockquote class="blockquote">
<p>Great! If we allow <strong>Scenario 1</strong> to <strong>scale dynamically to support parallel processing</strong>, we need to adjust the compute cost based on variable CPU utilization. Here’s how that impacts the estimation.</p>
<hr>
<h3 id="scenario-1-revised-cost-with-parallel-processing" class="anchored"><strong>Scenario 1: Revised Cost with Parallel Processing</strong></h3>
<h4 id="assumptions" class="anchored"><strong>Assumptions:</strong></h4>
<ul>
<li><p><strong>Orchestrator runs every hour</strong> (<strong>24 times per day</strong>).</p></li>
<li><p>Each execution lasts <strong>10 minutes</strong> but now <strong>can use up to 4 vCPUs when needed</strong>.</p></li>
<li><p><strong>Average vCPU usage per run</strong>:</p>
<ul>
<li><p>Some runs may use <strong>1–2 vCPUs</strong> (light workloads).</p></li>
<li><p>Others may spike to <strong>4 vCPUs</strong> (heavy parallel processing).</p></li>
<li><p>Assume an <strong>average usage of 3 vCPUs per execution</strong>.</p></li>
</ul></li>
<li><p><strong>Memory scales accordingly</strong>: Assume <strong>6GB RAM on average</strong>.</p></li>
</ul>
<h4 id="compute-cost-calculation" class="anchored"><strong>Compute Cost Calculation:</strong></h4>
<ul>
<li><p><strong>Total monthly runtime</strong>:</p>
<ul>
<li><strong>10 min per execution × 24 runs/day × 30 days = 7,200 minutes (~120 hours/month).</strong></li>
</ul></li>
<li><p><strong>CPU Cost:</strong></p>
<ul>
<li><p>Avg <strong>3 vCPUs per run</strong>.</p></li>
<li><p><strong>$0.06 per vCPU-hour</strong> × <strong>3 vCPUs</strong> × <strong>120 hours</strong> = <strong>$21.60/month</strong>.</p></li>
</ul></li>
<li><p><strong>Memory Cost:</strong></p>
<ul>
<li><p>Avg <strong>6GB RAM per run</strong>.</p></li>
<li><p><strong>$0.009 per GB-hour</strong> × <strong>6GB</strong> × <strong>120 hours</strong> = <strong>$6.48/month</strong>.</p></li>
</ul></li>
<li><p><strong>Storage &amp; Data Transfer:</strong></p>
<ul>
<li><strong>$5–10/month</strong> (no significant change).</li>
</ul></li>
</ul>
<p><strong>Final Total Cost: ~$35–45 CAD/month</strong></p>
<hr>
<h3 id="final-cost-comparison-cad" class="anchored"><strong>Final Cost Comparison (CAD)</strong></h3>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Approach</th>
<th>Monthly Cost (CAD)</th>
<th>Key Considerations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>1. Single Serverless Instance (Parallel Processing)</strong></td>
<td><strong>$35–45</strong> ✅</td>
<td>Cheapest, allows parallelism but limited by single-instance performance.</td>
</tr>
<tr class="even">
<td><strong>2. Separate Serverless Instances</strong></td>
<td><strong>$110–130</strong></td>
<td>Fully scalable, better for frequent workloads.</td>
</tr>
<tr class="odd">
<td><strong>3. Apache Airflow on Compute</strong></td>
<td><strong>$170–200</strong></td>
<td>Self-managed, full control, higher maintenance.</td>
</tr>
<tr class="even">
<td><strong>4. Cloud Managed Orchestration</strong></td>
<td><strong>$80–100</strong></td>
<td>Best for scalability without management overhead.</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="conclusion" class="anchored"><strong>Conclusion</strong></h3>
<ul>
<li><p><strong>Scenario 1 with parallelism remains the cheapest (~$35–45 CAD/month).</strong></p></li>
<li><p><strong>It allows parallel execution when needed</strong>, reducing the risk of long-running sequential jobs.</p></li>
<li><p><strong>It’s best if workload concurrency is manageable</strong> (e.g., not exceeding 4 vCPUs often).</p></li>
<li><p>If <strong>greater scalability is required</strong>, <strong>Scenario 4 (Managed Orchestration) would be the next best option</strong>.</p></li>
</ul>
<p>Would you like a cost vs.&nbsp;scalability chart to visualize these trade-offs? 🚀</p>
</blockquote>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Data <em>flows</em> through a pipeline. I’ll use the terms data flow and pipeline interchangeably.↩︎</p></li>
<li id="fn2"><p>By cost I’m mostly referring to cloud computing costs, although in theory it could reduce the cost of on-premise servers if it means purchasing fewer and less expensive servers.↩︎</p></li>
<li id="fn3"><p>I’m using the term <em>moderate enterprise</em> loosely to mean any organization that has around 10-50 data flows that process gigabytes of data for ETL, machine learning, etc. in batch jobs occurring at hourly or daily frequencies. This is what we have at the airport and it works perfectly fine with room to grow. As jobs become heavier and/or more frequent, you may need to be run maestro multicore or break up the project into multiple maestro projects.↩︎</p></li>
<li id="fn4"><p>At the airport we use Apache Nifi for legacy reasons and for the occasional time that streaming is needed. Managing the scheduling of each flow is inexplicably convoluted.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <guid>https://whipson.github.io/data-in-flight/posts/you-dont-need-airflow/main.html</guid>
  <pubDate>Wed, 26 Feb 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Chain your maestro pipelines DAG style</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-dags/main.html</link>
  <description><![CDATA[ 





<p>I’m thrilled to introduce the biggest maestro update yet. DAGs! A DAG (directed acyclic graph) in the context of data pipelines is when you have data processing steps that connect into other steps until a final step is reached. Almost all data orchestration platforms use the concept of DAGs to increase reusability and isolation of discrete components. As of maestro 0.4.0, DAGs are now possible using <code>maestroInputs</code> and <code>maestroOutputs</code> tags. This post will go through the motivation and implementation of this new feature.</p>
<p>If you haven’t heard of maestro, it’s a package that helps you schedule your R scripts all in a single project using tags. You can learn more about it <a href="../../posts/hello-maestro/hello-maestro.html">here</a>.</p>
<p>Get it from CRAN:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="why-dags" class="level2">
<h2 class="anchored" data-anchor-id="why-dags">Why DAGs?</h2>
<p>Let’s imagine we have a data pipeline where we want to extract data, clean/transform it, train a model, and send the predictions to a database. We can take each of these steps and chain them together so that the output of ‘extract’ is automatically fed into ‘clean/transform’, and so on.</p>
<p>The advantage of doing this in maestro is that you get better observability and retracability along each step. As we’ll see, we can more clearly identify where errors occur and even recover intermediate results.</p>
</section>
<section id="dags-in-maestro" class="level2">
<h2 class="anchored" data-anchor-id="dags-in-maestro">DAGs in maestro</h2>
<p>In short, a DAG pipeline is created using either <code>maestroInputs</code> or <code>maestroOutputs</code> tags. Both are valid but usually only one is needed. Simply put, a pipeline with a tag <code>#' @maestroInputs start_pipe</code> receives the output from a pipeline called <code>start_pipe</code>. Alternatively, we could use <code>#' @maestroOutputs end_pipe</code> to indicate that the pipeline called <code>end_pipe</code> receives the input of the current pipeline.</p>
<p>Let’s see an example where we make model predictions on the <code>nycflights13</code> data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' /pipelines/model_flights.R</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency daily</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2024-11-22 09:00:00</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroOutputs process_flights</span></span>
<span id="cb2-5">extract_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-6">  </span>
<span id="cb2-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Imagine this is from a source where the data changes</span></span>
<span id="cb2-8">  nycflights13<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>flights</span>
<span id="cb2-9">}</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroOutputs train_model</span></span>
<span id="cb2-12">process_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.input) {</span>
<span id="cb2-13">  </span>
<span id="cb2-14">  daily_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-15">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_date</span>(year, month, day)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-16">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb2-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_flights =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> date</span>
<span id="cb2-18">    )</span>
<span id="cb2-19">  </span>
<span id="cb2-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A simple time series</span></span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> daily_flights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_flights, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>)</span>
<span id="cb2-22">}</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroOutputs forecast_flights</span></span>
<span id="cb2-25">train_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.input) {</span>
<span id="cb2-26">  </span>
<span id="cb2-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A simple ARIMA model (using the {forecast} package would be better)</span></span>
<span id="cb2-28">  .input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-30">}</span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestro</span></span>
<span id="cb2-33">forecast_flights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.input) {</span>
<span id="cb2-34">  </span>
<span id="cb2-35">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forecast the next 7 days</span></span>
<span id="cb2-36">  pred_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(.input, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.ahead =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-37">  pred_obj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pred</span>
<span id="cb2-38">}</span></code></pre></div>
</div>
<p>We won’t focus much on the content of the functions. Instead, pay attention to the use of <code>maestroOutputs</code>. Each function that outputs into another references the name of that function. The last function <code>forecast_flights</code> just uses a generic <code>#' @maestro</code> tag to indicate that it is part of the maestro project. Also note the use of the special keyword <code>.input</code>. This argument must be supplied to all functions receiving an input. Use this argument to capture the data being passed each step along the pipeline.</p>
<p>Now we can build the schedule like always.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /orchestrator.R</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb3-3"></span>
<span id="cb3-4">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>We can verify that the DAG is properly defined using the <code>show_network()</code> function on our newly created schedule.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_network</span>(schedule)</span></code></pre></div>
<div class="cell-output-display">
<div class="grViz html-widget html-fill-item" id="htmlwidget-f479831f88694cd7c32c" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-f479831f88694cd7c32c">{"x":{"diagram":"digraph {\n\ngraph [layout = \"neato\",\n       outputorder = \"edgesfirst\",\n       bgcolor = \"white\"]\n\nnode [fontname = \"Helvetica\",\n      fontsize = \"10\",\n      shape = \"circle\",\n      fixedsize = \"true\",\n      width = \"0.5\",\n      style = \"filled\",\n      fillcolor = \"aliceblue\",\n      color = \"gray70\",\n      fontcolor = \"gray50\"]\n\nedge [fontname = \"Helvetica\",\n     fontsize = \"8\",\n     len = \"1.5\",\n     color = \"gray80\",\n     arrowsize = \"0.5\"]\n\n  \"1\" [label = \"extract_flights\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,4!\"] \n  \"2\" [label = \"process_flights\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,3!\"] \n  \"3\" [label = \"train_model\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,2!\"] \n  \"4\" [label = \"forecast_flights\", fillcolor = \"#F0F8FF\", fontcolor = \"#000000\", pos = \"0,1!\"] \n  \"1\"->\"2\" \n  \"2\"->\"3\" \n  \"3\"->\"4\" \n}","config":{"engine":"dot","options":null}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Now we can run the schedule. For testing purposes, we’ll set <code>run_all = TRUE</code> so that the pipeline runs no matter what the scheduling is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb5-2">  schedule,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">run_all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-4">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-11-22 14:25:11]
Running pipelines ▶ </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ extract_flights</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ extract_flights [768ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ |-process_flights</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ |-process_flights [24ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ   |-train_model</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔   |-train_model [9ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ   |-  |-forecast_flights</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔   |-  |-forecast_flights [5ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-11-22 14:25:11]
Pipeline execution completed ■ | 0.833 sec elapsed </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 4 successes | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 4 total</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>────────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Maestro Schedule with 4 pipelines:  </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Success</code></pre>
</div>
</div>
<p>We can see from the console output that the whole pipeline ran successfully. If we want to get the output from each of the steps, we can use <code>get_artifacts()</code>. This returns intermediate results too, which can be helpful if you want to retrieve state after a failed run of the schedule.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">artifacts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_artifacts</span>(schedule)</span>
<span id="cb26-2">artifacts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>forecast_flights</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time Series:
Start = c(2, 1) 
End = c(2, 7) 
Frequency = 365 
[1] 942.7232 934.9722 933.7773 933.5931 933.5647 933.5603 933.5596</code></pre>
</div>
</div>
<p>Maestro can be used to create any valid DAG (e.g., branching, joining, etc.). I hope this new addition to maestro super charges your data orchestration.</p>
<p>Check out the <a href="https://whipson.github.io/maestro/news/index.html">release notes</a> for more details on what’s new in version 0.4.0. If you find any bugs or want to suggest new features and improvements, please add them <a href="https://github.com/whipson/maestro/issues">here</a> or reach out to me on <a href="https://www.linkedin.com/in/will-hipson/">LinkedIn</a>.</p>
<p>Happy orchestrating!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-dags/main.html</guid>
  <pubDate>Fri, 22 Nov 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>maestro 0.3.0</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-0-3-0/maestro-0-3-0.html</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-0-3-0/images/logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p><code>maestro</code> 0.3.0 introduces principled methods for obtaining a schedule table, pipeline status, and artifacts (i.e., return values). This is now possible because of a major refactoring of the backend to use R6 classes for pipelines and schedules. This also introduced a few breaking changes, but on the whole, not a lot is different.</p>
<p>If you haven’t heard of maestro, it’s a package that helps you schedule your R scripts all in a single project using tags. You can learn more about it <a href="../../posts/hello-maestro/hello-maestro.html">here</a>.</p>
<p>Get it from CRAN:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="a-schedule-is-now-a-maestroschedule" class="level2">
<h2 class="anchored" data-anchor-id="a-schedule-is-now-a-maestroschedule">A schedule is now a &lt;MaestroSchedule&gt;</h2>
<p>Schedules are now a special class with attributes and methods. For most users, this won’t change how they use maestro, but it’ll make it much easier to extend maestro with new features in the future. Let’s see how a typical maestro scenario plays out now:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a few dummy pipelines for demo purposes</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_pipeline</span>(</span>
<span id="cb2-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">open =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-6">  )</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_pipeline</span>(</span>
<span id="cb2-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 week"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">open =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-9">  )</span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_pipeline</span>(</span>
<span id="cb2-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe3"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2 hours"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">open =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-12">  )</span>
<span id="cb2-13"></span>
<span id="cb2-14">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-15"></span>
<span id="cb2-16">output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb2-17">  schedule,</span>
<span id="cb2-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hourly"</span></span>
<span id="cb2-19">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-09-23 14:31:34]
Running pipelines ▶ </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ my_pipe3</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ my_pipe3 [8ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── [2024-09-23 14:31:34]
Pipeline execution completed ■ | 0.101 sec elapsed </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 1 success | → 2 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>────────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Next scheduled pipelines ❯ </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Pipe name | Next scheduled run</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• my_pipe3 | 2024-09-23 20:00:00</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• my_pipe | 2024-09-24</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• my_pipe2 | 2024-09-30</code></pre>
</div>
</div>
<p>So far these are the same steps as before. The difference is now in how we interact with the schedule. Here, <code>schedule</code> is no longer a data.frame, it’s a <code>&lt;MaestroSchedule&gt;</code> R6 object. If we want to get the status of each of the pipelines, we can use the new <code>get_status()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_status</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  pipe_name script_path  invoked success pipeline_started    pipeline_ended     
  &lt;chr&gt;     &lt;chr&gt;        &lt;lgl&gt;   &lt;lgl&gt;   &lt;dttm&gt;              &lt;dttm&gt;             
1 my_pipe   ./pipelines… FALSE   FALSE   NA                  NA                 
2 my_pipe2  ./pipelines… FALSE   FALSE   NA                  NA                 
3 my_pipe3  ./pipelines… TRUE    TRUE    2024-09-23 17:31:34 2024-09-23 17:31:34
# ℹ 4 more variables: errors &lt;int&gt;, warnings &lt;int&gt;, messages &lt;int&gt;,
#   next_run &lt;dttm&gt;</code></pre>
</div>
</div>
<p>If we just want the schedule, we can use <code>get_schedule()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_schedule</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 9
  script_path      pipe_name frequency start_time          tz    skip  log_level
  &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;     &lt;dttm&gt;              &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt;    
1 ./pipelines/my_… my_pipe   1 day     2024-09-23 00:00:00 UTC   FALSE INFO     
2 ./pipelines/my_… my_pipe2  1 week    2024-09-23 00:00:00 UTC   FALSE INFO     
3 ./pipelines/my_… my_pipe3  2 hours   2024-09-23 00:00:00 UTC   FALSE INFO     
# ℹ 2 more variables: frequency_n &lt;int&gt;, frequency_unit &lt;chr&gt;</code></pre>
</div>
</div>
<p>Note that we didn’t have to assign a new object when we ran <code>run_schedule()</code>. The object <code>schedule</code> is updated to reflect the execution of the schedule.</p>
<p>If any pipelines have return values, we can access those as a named list using <code>get_artifacts()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_artifacts</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>named list()</code></pre>
</div>
</div>
</section>
<section id="invoking-a-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="invoking-a-pipeline">Invoking a pipeline</h2>
<p>When interactively working in a maestro project, it may sometimes be useful to manually trigger a pipeline. Now, if you’ve created a <code>&lt;MaestroSchedule&gt;</code> object in the environment, you can do this using <code>invoke()</code>. This will execute the pipeline regardless of whether it’s scheduled or not.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invoke</span>(schedule, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipe_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_pipe"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ my_pipe</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ my_pipe [6ms]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
<p>Check out the <a href="https://whipson.github.io/maestro/news/index.html">release notes</a> for more details on what’s new in version 0.3.0. If you find any bugs or want to suggest new features and improvements, please add them <a href="https://github.com/whipson/maestro/issues">here</a> or reach out to me on <a href="https://www.linkedin.com/in/will-hipson/">LinkedIn</a>.</p>
<p>Happy orchestrating!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-0-3-0/maestro-0-3-0.html</guid>
  <pubDate>Mon, 23 Sep 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>maestro 0.2.0</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-0-2-0/maestro-0-2-0.html</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-0-2-0/images/logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p><code>maestro</code> 0.2.0 brings with it new features for scheduling pipelines on specific hours, days, or months. With a few new tags, we have so much more versatility for scheduling.</p>
<p>If you haven’t heard of maestro, it’s a package that helps you schedule your R scripts all in a single project using tags. You can learn more about it <a href="../../posts/hello-maestro/hello-maestro.html">here</a>.</p>
<p>Get it from CRAN:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="new-maestrofrequency-syntax" class="level2">
<h2 class="anchored" data-anchor-id="new-maestrofrequency-syntax">New maestroFrequency Syntax</h2>
<p>The maestroFrequency tag used to be restrictive in how you specified your pipeline frequency, only accepting it in the form of [n] [units] like <code>1 day</code>, <code>4 hours</code>, <code>2 weeks</code>, etc. A more human-readable adverb option is now available. You can specify it as one of <code>hourly</code>, <code>daily</code>, <code>weekly</code>, <code>biweekly</code>, <code>monthly</code>, <code>quarterly</code> and <code>yearly</code>. Each of these is the equivalent of 1 [unit]. So, hourly = 1 hour.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example hourly pipeline</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb2-3">my_hourly_job <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb2-5">}</span></code></pre></div>
</div>
<p>You can also use this syntax in <code>run_schedule</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb3-4">  example_schedule,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hourly"</span></span>
<span id="cb3-6">)</span></code></pre></div>
</div>
<p>These frequencies are important not only for readability but they also combine with hour, day, and month specifiers for more bespoke scheduling.</p>
</section>
<section id="new-hours-days-months-specifiers" class="level2">
<h2 class="anchored" data-anchor-id="new-hours-days-months-specifiers">New Hours, Days, Months Specifiers</h2>
<p>Until now you could only run pipelines on regular intervals. With 0.2.0 you can specify particular hours, days, and months you want the pipelines to run. This is useful if you want to do something like have a job run only on business hours or just on weekends. 3 new tags <code>maestroHours</code>, <code>maestroDays</code>, and <code>maestroMonths</code> are available.</p>
<section id="specific-hours" class="level3">
<h3 class="anchored" data-anchor-id="specific-hours">Specific Hours</h3>
<p>Let’s say I have a pipeline I want to run during regular 9am-5pm business hours. I can use a maestroFrequency of hourly and specify the hours 9am through to 5pm:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example work hours pipeline</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroHours 9 10 11 12 13 14 15 16 17</span></span>
<span id="cb4-4">my_work_hours_job <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb4-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb4-6">}</span></code></pre></div>
</div>
<p>This will be UTC hours by default. If I want my timezone to be where I live I can specify <code>maestroTz America/Halifax</code>.</p>
</section>
<section id="specific-days" class="level3">
<h3 class="anchored" data-anchor-id="specific-days">Specific Days</h3>
<p>We can specify either days of week or days of month. Days of week use abbreviated weekdays like Mon, Wed, Sat; whereas days of month use integers 1, 10, 15, etc.</p>
<p>Taking the above example further, let’s have it run during business hours on weekdays:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example work hours pipeline</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroHours 9 10 11 12 13 14 15 16 17</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroDays Mon Tue Wed Thu Fri</span></span>
<span id="cb5-5">my_work_hours_job2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb5-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb5-7">}</span></code></pre></div>
</div>
</section>
<section id="specific-months" class="level3">
<h3 class="anchored" data-anchor-id="specific-months">Specific Months</h3>
<p>To specify the months use the integers 1-12. Let’s imagine that our pipeline only runs in March, June, October, and December:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Example work hours pipeline</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency hourly</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroHours 9 10 11 12 13 14 15 16 17</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroDays Mon Tue Wed Thu Fri</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroMonths 3 6 10 12</span></span>
<span id="cb6-6">my_work_hours_job3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># job code ...</span></span>
<span id="cb6-8">}</span></code></pre></div>
</div>
<p>These specifiers must be used with -ly frequencies like hourly and daily. The type of specifier used must be at least the same as the base frequency. For example, we can’t use maestroHours on a pipeline with a daily frequency.</p>
</section>
</section>
<section id="improvements-to-suggest_orch_frequency" class="level2">
<h2 class="anchored" data-anchor-id="improvements-to-suggest_orch_frequency">Improvements to <code>suggest_orch_frequency</code></h2>
<p>The function <code>suggest_orch_frequency</code> takes a schedule generated from <code>build_schedule</code> and suggests the likely optimal frequency for the orchestrator. Until recently, this function was pretty basic and just suggested twice the amount of the highest frequency pipeline in the project. This wouldn’t work out well if you had pipelines staggered on different hours.</p>
<p>Now <code>suggest_orch_frequency</code> looks for the smallest interval of time between pipelines. It won’t consider hours, days, months specifiers though.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb7-2"></span>
<span id="cb7-3">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ 1 script successfully parsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suggest_orch_frequency</span>(schedule)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1 day"</code></pre>
</div>
</div>
<p>Note that <code>suggest_orch_frequency</code> assumes that you want to run your pipelines <em>exactly</em> when you want them to - it won’t try to round to the nearest 15 minute or whatever.</p>
<p>Check out the <a href="https://whipson.github.io/maestro/news/index.html">release notes</a> for more details on what’s new in version 0.2.0. If you find any bugs or want to suggest new features and improvements, please add them <a href="https://github.com/whipson/maestro/issues">here</a> or reach out to me on <a href="https://www.linkedin.com/in/will-hipson/">LinkedIn</a>.</p>
<p>Happy orchestrating!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-0-2-0/maestro-0-2-0.html</guid>
  <pubDate>Tue, 27 Aug 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying a Maestro Project to Google Cloud Platform</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/maestro-gcp-deployment.html</link>
  <description><![CDATA[ 





<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/DALL·E 2024-06-24 13.13.56 - A very simple blueprint-style header image with a hand-drawn feel. Include only a single detailed sketch of a light bulb. The background should be a d.webp" class="img-fluid" alt="Blueprint style image showing lightbulbs"></p>
<p>In the previous post we saw how <code>maestro</code> helps orchestrate data pipelines in a single R project. For maestro to be useful you need to deploy it somewhere and these days that ‘somewhere’ is often cloud-based. Here we’ll walk through deploying a maestro project in the cloud on Google Cloud Platform (GCP).<sup>1</sup></p>
<p>This post assumes some familiarity with the <code>maestro</code> package although the practice of deploying on GCP can be generalized to almost any project. The previous <a href="../../posts/hello-maestro/hello-maestro.html">blog post</a> walks through maestro specifically.</p>
<p>This project is available on Github <a href="https://github.com/whipson/maestro_gcp">here</a>.</p>
<section id="design" class="level2">
<h2 class="anchored" data-anchor-id="design">Design</h2>
<p>Like any cloud offering, GCP gives us many different ways to solve the same problem.<sup>2</sup> My suggested design is by no means the only way nor is it necessarily the best way. I strove for simplicity. In the end, I landed on 3 GCP services needed to deploy the project:</p>
<ol type="1">
<li>Cloud Build for hosting the containerized project.</li>
<li>Cloud Run Jobs for executing the container.</li>
<li>Cloud Scheduler for scheduling the container to run.</li>
</ol>
<p>The most complicated of these is the first step and requires some familiarity with Docker (and ideally Github).</p>
</section>
<section id="dockerizing-maestro" class="level2">
<h2 class="anchored" data-anchor-id="dockerizing-maestro">Dockerizing Maestro</h2>
<p>The best way to ensure that our maestro project runs in the cloud with all its dependencies is to use Docker. Docker is widespread in software development these days and is practically a requirement for deploying anything. I won’t go over the fundamentals of Docker here (Alex Gold’s <em>DevOps for Data Science</em> has a <a href="https://do4ds.com/chapters/sec1/1-6-docker.html">Demystifying Docker</a> chapter that is very helpful if you’re new or rusty with Docker).</p>
<p>We need to create a <code>Dockerfile</code> at the root level of the project. I used <code>dockerfiler</code> for this. It has a function <code>dock_from_renv()</code> and it got me about 90% of the way there. As implied in the name you need to be using <code>renv</code>.<sup>3</sup></p>
<p>After using dockerfiler to generate the Dockerfile, I made some necessary tweaks. The main thing is to add a few system libraries and to add the <code>ENTRYPOINT ["Rscript", "orchestrator.R"]</code> so that Google Cloud Run knows to execute that script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dockerfile</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> rocker/r-ver</span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-4">    libxml2-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-5">    libcurl4-openssl-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-6">    libssl-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-7">    libsodium-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-8">    zlib1g-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-9">    pkg-config <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'install.packages("remotes")'</span></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'remotes::install_version("renv", version = "1.0.7")'</span></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /usr/src/app</span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . .</span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'renv::restore()'</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENTRYPOINT</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orchestrator.R"</span>]</span></code></pre></div>
<p>I also had to add some system libraries (<code>libcurl4-openssl-dev</code> for making the API requests). This part is a bit tedious and will depend on your situation. For instance, if you’re doing anything geospatial you may need lib-gdal. ChatGPT was pretty helpful when I ran into errors building my docker image.</p>
<p>This leads us to the next step: building the image and testing it in a container locally. This is where you can debug problems before you go to deploy to GCP.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> maestro_gcp .</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run maestro_gcp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--rm</span></span></code></pre></div>
</div>
</section>
<section id="creating-a-cloudbuild.yaml" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-cloudbuild.yaml">Creating a cloudbuild.yaml</h2>
<p>The cloudbuild.yaml is a configuration file for telling GCP what image to use and how to build it. Think of it as the link connecting your project to the place where the docker image will live in GCP. Full confession: ChatGPT helped me with this one:</p>
<pre><code>steps:
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/maestro-gcp', '.']
images:
- 'gcr.io/$PROJECT_ID/maestro-gcp'
options:
  logging: CLOUD_LOGGING_ONLY</code></pre>
<p>Name this file <code>cloudbuild.yaml</code> and add it to the root level of your project. At this point, you should have a project structure that looks something like this:</p>
<pre><code>.
├── Dockerfile
├── cloudbuild.yaml
├── maestro-gcp-deploy.Rproj
├── orchestrator.R
├── pipelines
├── renv
└── renv.lock</code></pre>
</section>
<section id="hosting-the-container-on-gcp" class="level2">
<h2 class="anchored" data-anchor-id="hosting-the-container-on-gcp">Hosting the Container on GCP</h2>
<p>The great thing about Cloud Build is you can host a project with a Dockerfile on Github and deploy it to GCP from there.</p>
<p>Create the Github repo and push the project code there. Then, in the GCP console and, inside of Cloud Build &gt; Triggers, select Connect Repository.</p>
<p>Once you open the Connect Repository wizard and select Github, it’ll step you through some authentication.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-build-success.png" class="img-fluid figure-img" alt="Screenshot of GCP Console showing successful cloud build."></p>
<figcaption>Successful Cloud Build in GCP Console.</figcaption>
</figure>
</div>
</section>
<section id="create-cloud-job-run" class="level2">
<h2 class="anchored" data-anchor-id="create-cloud-job-run">Create Cloud Job Run</h2>
<p>If your build was successful, congrats! You made it through the hardest part. We now go to Cloud Run Jobs.<sup>4</sup> Go to Create Job and browse through to find your recently build container.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-cloud-run-create.png" class="img-fluid figure-img" alt="Create Job wizard in GCP Console."></p>
<figcaption>Create Job wizard in GCP Console.</figcaption>
</figure>
</div>
<p>You may also want to select the box to ‘Execute job immediately’ to test that the container runs as expected.</p>
</section>
<section id="schedule-it" class="level2">
<h2 class="anchored" data-anchor-id="schedule-it">Schedule It</h2>
<p>We can stay right within the Cloud Run service to do the scheduling even though it is handled by Google Cloud Scheduler.</p>
<p>Click on your newly created job and then on Triggers &gt; Add Scheduler Trigger:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-schedule-create.png" class="img-fluid figure-img" alt="GCP Console showing Cloud Scheduler job."></p>
<figcaption>Adding a scheduler trigger to the cloud job.</figcaption>
</figure>
</div>
<p>The Frequency input uses cron syntax. You can use <a href="https://crontab.guru/">Crontab</a> to help specify the schedule. When it’s created you should see something below like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-trigger-created.png" class="img-fluid figure-img" alt="Screenshot of GCP Console showing successfully created scheduler job."></p>
<figcaption>Successfully created cron schedule for Cloud Run Job.</figcaption>
</figure>
</div>
<p>I like to trigger the job manually too to see how it runs, or you can just wait until the schedule kicks in.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/images/gcp-logs.png" class="img-fluid figure-img" alt="Screenshot of the GCP console showing the successful run of a scheduled job."></p>
<figcaption>Logs of the cloud run job.</figcaption>
</figure>
</div>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final Remarks</h2>
<p>And that about sums it up for the deployment. Cloud deployment is almost never a straightforward process, so be prepared for some failed attempts. I relied on ChatGPT when I ran into problems. My organization gives us access to ChatGPT 4o and it seems to have an excellent grasp of GCP. It tends to provide command line instructions rather than point-click in the GCP console, but this is for your benefit - it’s more reproducible and stable.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Why GCP and not AWS or Azure? We chose GCP for this initial post on deployment for two reasons. First is it has always free tiers for commonly used services. For lightweight use cases, you won’t have to worry about incurring a cloud bill. Another reason is I’ve found the learning curve for GCP much gentler compared to AWS and Azure. In general, GCP is much better at helping you do what you need to do at very little to no cost (for lightweight jobs).↩︎</p></li>
<li id="fn2"><p>Cloud providers are great at packaging the same fundamental activity in a million different ways. Try not to get overwhelmed with all the different services in GCP. Usually you’ll only ever make use of a few of the most common ones. Everything comes down to compute and storage.↩︎</p></li>
<li id="fn3"><p>Yes, I realize this may feel like a lot before we’ve even made it to GCP. While Docker and renv create additional work (and often frustration) up front, it truly is more beneficial when it comes to the actual deployment. Without Docker, setting up the runtime is an especially painful game of whack-a-mole. This doesn’t mean you won’t have to whack a few moles first though.↩︎</p></li>
<li id="fn4"><p>Make sure you choose Create Job and not Create Service. Services listen for HTTP requests whereas jobs can be triggered by a cron schedule.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>data engineering</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>deployment</category>
  <category>cloud</category>
  <category>tutorial</category>
  <guid>https://whipson.github.io/data-in-flight/posts/maestro-gcp-deployment/maestro-gcp-deployment.html</guid>
  <pubDate>Mon, 24 Jun 2024 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Hello maestro</title>
  <dc:creator>Will Hipson</dc:creator>
  <link>https://whipson.github.io/data-in-flight/posts/hello-maestro/hello-maestro.html</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://whipson.github.io/data-in-flight/posts/hello-maestro/images/logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I’m thrilled to announce the release of <code>maestro</code>, a new package for developing, scheduling, and monitoring data pipelines. Here, I’ll walk through what maestro does and why you’d want to use it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>)</span></code></pre></div>
</div>
<section id="the-motivation" class="level2">
<h2 class="anchored" data-anchor-id="the-motivation">The Motivation</h2>
<p>Let’s start with the <em>why</em>. Data engineers often have to manage multiple data pipelines - dozens or maybe even hundreds of pipelines. Scheduling and monitoring these pipelines in production poses challenges, particularly as the number of pipelines increases. Maestro takes a holistic approach by managing multiple independent pipelines in a single R project.<sup>1</sup> No need to maintain several R projects or use bulky orchestration tools.</p>
</section>
<section id="one-orchestrator-many-pipelines" class="level2">
<h2 class="anchored" data-anchor-id="one-orchestrator-many-pipelines">One Orchestrator, Many Pipelines</h2>
<p>There are two components to a maestro project: an orchestrator and a collection of pipelines. A pipeline is a function that performs a task, such as extracting data and then storing it somewhere. The goal of maestro is to manage (i.e., schedule and monitor) multiple pipelines. This is done using an orchestrator script. The orchestrator script runs maestro commands like <code>build_schedule()</code> and <code>run_schedule()</code> to execute the pipelines and monitor them.</p>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span></code></pre></div>
</div>
<p>It is best to use maestro in an R project. After installing the package, you can create a new project using <code>create_maestro()</code> or in RStudio &gt; New Project &gt; Maestro Project. You’ll find yourself in an R project with a structure like this:</p>
<pre><code>my_project_directory
├── orchestrator.R
└── pipelines
    └── my_pipe.R</code></pre>
<section id="our-first-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="our-first-pipeline">Our First Pipeline</h3>
<p>Let’s take a look at <code>my_pipe.R</code> that was created:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' my_pipe maestro pipeline</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency 1 day</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2024-06-03</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroTz UTC</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroLogLevel INFO</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">my_pipe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb4-9"></span>
<span id="cb4-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pipeline code</span></span>
<span id="cb4-11">}</span></code></pre></div>
</div>
<p>The script has been populated with R code to assign a function called my_pipe. The function has no code in the body so it won’t do anything just yet. Above the function declaration are some specially formatted code comments. These are maestro tags and they’re used to configure the scheduling and operation of the pipeline.<sup>2</sup></p>
<p>The tags most important for scheduling are <code>maestroFrequency</code> and <code>maestroStartTime</code>. <code>maestroFrequency</code> is how often to run the pipeline. It takes a number and a time unit, like 1 day, 3 hours, 15 minutes, or 6 months. <code>maestroStartTime</code> is a Date (yyyy-mm-dd) or timestamp (yyyy-mm-dd HH:MM:SS) indicating when the schedule starts.</p>
<p>Configuring the start time is important if you have specific times you want it to run. If, for example, you want the pipeline to run once daily at 12:30, you’d use <code>@maestroStartTime 2024-06-03 12:00:00</code> (note here that the date part doesn’t matter unless you schedule it in the future).</p>
<p>We won’t concern ourselves with the other tags for now; just know that there are more and they all have default values.</p>
<p>Now let’s get the pipeline to do something. In the spirit of typical data engineering tasks, we’ll create an ETL (Extract, Transform, Load) pipeline that gets data from a source, transforms it by adding a new column, and loads it into storage.</p>
</section>
<section id="making-a-useful-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="making-a-useful-pipeline">Making a Useful Pipeline</h3>
<p>We’ll use the open API from Environment Canada called <a href="https://api.weather.gc.ca/openapi?f=html">Geomet</a> for meteorological data and we’ll use DuckDB for storage. We’ll need the <code>httr2</code> and <code>duckdb</code> packages for extraction and storage, respectively.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Located in ./pipelines/my_pipe.R</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroFrequency 1 day</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @maestroStartTime 2024-06-03</span></span>
<span id="cb5-4">geomet_stations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb5-5">  </span>
<span id="cb5-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formulate the request  </span></span>
<span id="cb5-7">  req <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">request</span>(</span>
<span id="cb5-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.weather.gc.ca/collections/climate-stations/items"</span></span>
<span id="cb5-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-10">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_url_query</span>(</span>
<span id="cb5-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limit =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb5-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skipGeometry =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-13">    )</span>
<span id="cb5-14">  </span>
<span id="cb5-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send the request and interpret the response</span></span>
<span id="cb5-16">  resp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> req <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-17">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req_perform</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-18">    httr2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resp_body_json</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplifyVector =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-19">  </span>
<span id="cb5-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the properties element where the rectangular data is located</span></span>
<span id="cb5-21">  stations_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> resp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>properties</span>
<span id="cb5-22">  </span>
<span id="cb5-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean the names</span></span>
<span id="cb5-24">  stations_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stations_dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-25">    janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-26">    janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_empty</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">which =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rows"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cols"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-27">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">insert_time =</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">now</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tzone =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>)</span>
<span id="cb5-29">    )</span>
<span id="cb5-30">  </span>
<span id="cb5-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to a local in-memory duckdb</span></span>
<span id="cb5-32">  conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(duckdb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>())</span>
<span id="cb5-33">  </span>
<span id="cb5-34">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and write to a table</span></span>
<span id="cb5-35">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(</span>
<span id="cb5-36">    conn, </span>
<span id="cb5-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geomet_stations_transactional"</span>, </span>
<span id="cb5-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> stations_clean</span>
<span id="cb5-39">  )</span>
<span id="cb5-40">  </span>
<span id="cb5-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test that it worked in the return</span></span>
<span id="cb5-42">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb5-43">    conn, </span>
<span id="cb5-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    select * from geomet_stations_transactional</span></span>
<span id="cb5-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    order by insert_time desc</span></span>
<span id="cb5-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    limit 10</span></span>
<span id="cb5-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "</span></span>
<span id="cb5-49">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-50">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb5-51">  </span>
<span id="cb5-52">  DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbDisconnect</span>(conn)</span>
<span id="cb5-53">  </span>
<span id="cb5-54">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(</span>
<span id="cb5-55">    res</span>
<span id="cb5-56">  )</span>
<span id="cb5-57">}</span></code></pre></div>
</div>
</section>
<section id="orchestrate-it" class="level3">
<h3 class="anchored" data-anchor-id="orchestrate-it">Orchestrate It</h3>
<p>Now that we have a single useful pipeline, let’s orchestrate it (in practice, we’d probably have more than one pipeline). We’ll set the orchestrator to run at a daily frequency (this does not actually cause it to run daily, we need something else external to the R project to actually run it). For testing purposes, we’ll then run this interactively:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Located in ./orchestrator.R</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maestro)</span>
<span id="cb6-3"></span>
<span id="cb6-4">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_schedule</span>()</span>
<span id="cb6-5"></span>
<span id="cb6-6">orch_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_schedule</span>(</span>
<span id="cb6-7">  schedule,</span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orch_frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 day"</span></span>
<span id="cb6-9">)</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color: #66C2CD;">ℹ</span> 1 script successfully parsed                                                  
                                                                                
── [2024-09-23 10:29:02]                                                        
Running pipelines <span style="color: #A8CC8C;">▶</span>                                                             
<span style="color: #A8CC8C;">✔</span> <span style="color: #71BEF2;">geomet_stations</span> <span style="color: #b8b8b8;">[566ms]</span>                                                       
                                                                                
── [2024-09-23 10:29:02]                                                        
Pipeline execution completed <span style="color: #6F7783;">■</span> | 0.57 sec elapsed                               
<span style="color: #A8CC8C;">✔</span> 1 success | <span style="color: #282D35;">→</span> 0 skipped | <span style="color: #D290E4;">!</span> 0 warnings | <span style="color: #E88388;">✖</span> 0 errors | <span style="color: #66C2CD;">◼</span> 1 total               
────────────────────────────────────────────────────────────────────────────────
                                                                                
── Next scheduled pipelines <span style="color: #66C2CD;">❯</span>                                                   
Pipe name | Next scheduled run                                                  
• geomet_stations | 2024-09-25                                                  
</pre>
</div>
</div>
</section>
</section>
<section id="deployment" class="level2">
<h2 class="anchored" data-anchor-id="deployment">Deployment</h2>
<p>Ok, so we ran the orchestrator interactively, but this is only useful for testing. In practice, we want to deploy this on a server and have it run every day. To be clear: maestro does <em>not</em> do this for you - it just assumes that you are doing this and behaves accordingly. In other words, when you declare <code>orch_frequency = "1 day"</code> you are saying that you <em>intend</em> to run the orchestrator every 1 day.</p>
<p>The first decision to make about deployment is local vs.&nbsp;cloud. If you own the server it’s local<sup>3</sup>, if you rent the hardware and connect to it remotely it’s cloud. Here, we’ll run through a straightforward local deployment because it requires less configuration and won’t cost you anything.</p>
<section id="maclinux-cronr" class="level4">
<h4 class="anchored" data-anchor-id="maclinux-cronr">Mac/Linux: cronR</h4>
<p>Cron is a job scheduler for the Mac/Linux systems. You can use <code>cronR</code> to interface with it via R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cronR)</span>
<span id="cb7-2"></span>
<span id="cb7-3">cmd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cron_rscript</span>(</span>
<span id="cb7-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orchestrator.R"</span>, </span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workdir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span>
<span id="cb7-6">)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cron_add</span>(</span>
<span id="cb7-9">  cmd, </span>
<span id="cb7-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"daily"</span>,</span>
<span id="cb7-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>,</span>
<span id="cb7-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ask =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb7-13">)</span></code></pre></div>
</div>
</section>
<section id="windows-taskscheduler" class="level4">
<h4 class="anchored" data-anchor-id="windows-taskscheduler">Windows: taskscheduleR</h4>
<p>Windows users can use <code>taskscheduleR</code> to schedule a job via R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(taskscheduleR)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">taskscheduler_create</span>(</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">taskname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maestro"</span>, </span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rscript =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orchestrator.R"</span>, </span>
<span id="cb8-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">schedule =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DAILY"</span>,</span>
<span id="cb8-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exec_path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span>
<span id="cb8-8">)</span></code></pre></div>
</div>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final Remarks</h2>
<p>In this post, we saw how maestro can be used to orchestrate multiple pipelines in a single R project. Maestro is in its early development, but I encourage you to try it out. We’re using it in production to orchestrate 18 production pipelines at the Halifax International Airport!</p>
<p>I’d be remiss not to mention a few caveats of maestro:</p>
<ol type="1">
<li>It should only be used for light-medium scale batch jobs. If you need to do streaming and/or heavy load jobs, it’s probably not for you.</li>
<li>Configuring the schedule for the orchestrator requires some thought. If you have several pipelines at different intervals and times you’ll want to choose a frequency that makes sense. You can use <code>suggest_orch_frequency()</code> to get a heuristic suggestion based on a schedule. Even then - you need to make sure you actually run the orchestrator at this frequency. Weird things happen if your orchestrator actually runs more or less frequently than you said it would.</li>
</ol>
<p>That said, I think maestro is great for small-medium sized pipeline orchestration. If you’re looking to deploy maestro on the cloud, this <a href="../../posts/maestro-gcp-deployment/maestro-gcp-deployment.html">blog post</a> will help you get started in Google Compute Platform (GCP).</p>
<section id="notes" class="level4">
<h4 class="anchored" data-anchor-id="notes">Notes</h4>
<p>This post was created using R version 4.4.1 (2024-06-14) and maestro version 0.3.0.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A popular R package for data pipelines that has been around for some time is <a href="https://docs.ropensci.org/targets/">targets</a>. Maestro is different from targets in that the focus of maestro is to orchestrate multiple <em>independent</em> data pipelines whereas targets is for a single connected pipeline. Maestro would be more suited toward ETL data engineering where targets is for complex analytics pipelines.↩︎</p></li>
<li id="fn2"><p>R users will recognize that maestro uses custom <a href="https://roxygen2.r-lib.org/">roxygen2</a> tags.↩︎</p></li>
<li id="fn3"><p>Yes, this includes your personal laptop or desktop; however, it probably goes to sleep when not used. If you’re using a Mac, you can use <code>pmset</code> in the command line to get around this (<a href="https://www.dssw.co.uk/reference/pmset/" class="uri">https://www.dssw.co.uk/reference/pmset/</a>).↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>data engineering</category>
  <category>data pipelines</category>
  <category>orchestration</category>
  <category>maestro</category>
  <category>packages</category>
  <category>deployment</category>
  <category>release</category>
  <guid>https://whipson.github.io/data-in-flight/posts/hello-maestro/hello-maestro.html</guid>
  <pubDate>Wed, 19 Jun 2024 03:00:00 GMT</pubDate>
</item>
</channel>
</rss>
