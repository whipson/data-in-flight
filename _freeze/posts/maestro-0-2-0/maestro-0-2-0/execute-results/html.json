{
  "hash": "d51cf5692c8047019cd029ebec3607cd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"maestro 0.2.0\"\nsubtitle: New tags for specifying hours, days, and months for pipelines\nauthor: \"Will Hipson\"\ndate: \"2024-08-27\"\ndate-modified: last-modified\ncategories: [R, data pipelines, orchestration, maestro, packages, release]\n---\n\n\n\n![](images/logo.png){fig-align=\"center\"}\n\n`maestro` 0.2.0 brings with it new features for scheduling pipelines on specific hours, days, or months. With a few new tags, we have so much more versatility for scheduling.\n\nIf you haven't heard of maestro, it's a package that helps you schedule your R scripts all in a single project using tags. You can learn more about it [here](../hello-maestro/hello-maestro.qmd).\n\nGet it from CRAN:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maestro\")\n```\n:::\n\n\n\n## New maestroFrequency Syntax\n\nThe maestroFrequency tag used to be restrictive in how you specified your pipeline frequency, only accepting it in the form of \\[n\\] \\[units\\] like `1 day`, `4 hours`, `2 weeks`, etc. A more human-readable adverb option is now available. You can specify it as one of `hourly`, `daily`, `weekly`, `biweekly`, `monthly`, `quarterly` and `yearly`. Each of these is the equivalent of 1 \\[unit\\]. So, hourly = 1 hour.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Example hourly pipeline\n#' @maestroFrequency hourly\nmy_hourly_job <- function() {\n  # job code ...\n}\n```\n:::\n\n\n\nYou can also use this syntax in `run_schedule`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maestro)\n\nrun_schedule(\n  example_schedule,\n  orch_frequency = \"hourly\"\n)\n```\n:::\n\n\n\nThese frequencies are important not only for readability but they also combine with hour, day, and month specifiers for more bespoke scheduling.\n\n## New Hours, Days, Months Specifiers\n\nUntil now you could only run pipelines on regular intervals. With 0.2.0 you can specify particular hours, days, and months you want the pipelines to run. This is useful if you want to do something like have a job run only on business hours or just on weekends. 3 new tags `maestroHours`, `maestroDays`, and `maestroMonths` are available.\n\n### Specific Hours\n\nLet's say I have a pipeline I want to run during regular 9am-5pm business hours. I can use a maestroFrequency of hourly and specify the hours 9am through to 5pm:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Example work hours pipeline\n#' @maestroFrequency hourly\n#' @maestroHours 9 10 11 12 13 14 15 16 17\nmy_work_hours_job <- function() {\n  # job code ...\n}\n```\n:::\n\n\n\nThis will be UTC hours by default. If I want my timezone to be where I live I can specify `maestroTz America/Halifax`.\n\n### Specific Days\n\nWe can specify either days of week or days of month. Days of week use abbreviated weekdays like Mon, Wed, Sat; whereas days of month use integers 1, 10, 15, etc.\n\nTaking the above example further, let's have it run during business hours on weekdays:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Example work hours pipeline\n#' @maestroFrequency hourly\n#' @maestroHours 9 10 11 12 13 14 15 16 17\n#' @maestroDays Mon Tue Wed Thu Fri\nmy_work_hours_job2 <- function() {\n  # job code ...\n}\n```\n:::\n\n\n\n### Specific Months\n\nTo specify the months use the integers 1-12. Let's imagine that our pipeline only runs in March, June, October, and December:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Example work hours pipeline\n#' @maestroFrequency hourly\n#' @maestroHours 9 10 11 12 13 14 15 16 17\n#' @maestroDays Mon Tue Wed Thu Fri\n#' @maestroMonths 3 6 10 12\nmy_work_hours_job3 <- function() {\n  # job code ...\n}\n```\n:::\n\n\n\nThese specifiers must be used with -ly frequencies like hourly and daily. The type of specifier used must be at least the same as the base frequency. For example, we can't use maestroHours on a pipeline with a daily frequency.\n\n## Improvements to `suggest_orch_frequency`\n\nThe function `suggest_orch_frequency` takes a schedule generated from `build_schedule` and suggests the likely optimal frequency for the orchestrator. Until recently, this function was pretty basic and just suggested twice the amount of the highest frequency pipeline in the project. This wouldn't work out well if you had pipelines staggered on different hours.\n\nNow `suggest_orch_frequency` looks for the smallest interval of time between pipelines. It won't consider hours, days, months specifiers though.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maestro)\n\nschedule <- build_schedule()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nâ„¹ 1 script successfully parsed\n```\n\n\n:::\n\n```{.r .cell-code}\nsuggest_orch_frequency(schedule)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1 day\"\n```\n\n\n:::\n:::\n\n\n\nNote that `suggest_orch_frequency` assumes that you want to run your pipelines *exactly* when you want them to - it won't try to round to the nearest 15 minute or whatever.\n\nCheck out the [release notes](https://whipson.github.io/maestro/news/index.html) for more details on what's new in version 0.2.0. If you find any bugs or want to suggest new features and improvements, please add them [here](https://github.com/whipson/maestro/issues) or reach out to me on [LinkedIn](https://www.linkedin.com/in/will-hipson/).\n\nHappy orchestrating!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}